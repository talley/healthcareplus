<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KellermanSoftware.NET-Email-Validation</name>
    </assembly>
    <members>
        <member name="T:KellermanSoftware.NetEmailValidation.CompareMethod">
            <summary>
            How to compare against an email address
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEmailValidation.CompareMethod.UserName">
            <summary>
            Compare the user portion of the email address
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEmailValidation.CompareMethod.DomainName">
            <summary>
            Compare the domain portion of the email address
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEmailValidation.CompareMethod.Email">
            <summary>
            Compare the entire email address
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEmailValidation.CompareMethod.Contains">
            <summary>
            If the email contains the text
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEmailValidation.CompareMethod.ContainsWord">
            <summary>
            If the email contains the word
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetEmailValidation.EmailValidation">
            <summary>
            Validate one or many email addresses
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetEmailValidation.EmailValidation.ResponseReceivedEventHandler">
            <summary>Occurs when a validation response is received for asynchronous processing.</summary>
            <example>
            	<code lang="CS" title="Response Received Event Handler CSharp">
            		<![CDATA[
            public void Example()
            {
                EmailValidation emailValidator = new EmailValidation(); //Trial Mode
                //EmailValidation emailValidator = new EmailValidation("place user name here", "place license key here"); //License Mode
                 
                emailValidator.FromEmail = "someone@somewhere.com";
                emailValidator.FromMailServer = "mail.somewhere.com";
            
                //Create a list of 100 email addresses with an id
                Dictionary<string, string> emailAddresses = new Dictionary<string, string>();
                 
                for (int i = 1; i <= 100; i++)
                    emailAddresses.Add(i.ToString(),string.Format("johnsmith{0}@hotmail.com", i));
                 
                List<ValidationOptions> options = emailValidator.BestConnectionOptions();
                 
                //Attach Events                
                emailValidator.ProgressEvent += new EmailValidation.ProgressChangedEventHandler(ProgressEvent);
                emailValidator.ValidationCompleteEvent += new AsyncCompletedEventHandler(CompletionEvent);
                emailValidator.ResponseReceivedEvent += new EmailValidation.ResponseReceivedEventHandler(ResponseReceivedEvent);
                 
                //Begin asynchronous validation
                emailValidator.ValidateListAsync(emailAddresses, options);
                 
                while (emailValidator.IsBusy)
                {
                    //Sleep 1 second
                    System.Threading.Thread.Sleep(1000);
                }
                 
                //Remove the event connections
                emailValidator.ProgressEvent -= new EmailValidation.ProgressChangedEventHandler(ProgressEvent);
                emailValidator.ValidationCompleteEvent -= new AsyncCompletedEventHandler(CompletionEvent);
                emailValidator.ResponseReceivedEvent -= new EmailValidation.ResponseReceivedEventHandler(ResponseReceivedEvent);
            }
             
             
            public void CompletionEvent(object sender, AsyncCompletedEventArgs e)
            {
                Console.WriteLine("Finished. Validated emails");
            }
             
            public void ProgressEvent(object sender, ProgressEventArgs args)
            {
                Console.WriteLine(string.Format("{0}% ({1} of {2}", args.ProgressPercentage, args.EmailsProcessed, args.TotalEmailsToProcess));
            }
             
            public void ResponseReceivedEvent(object sender, Result result)
            {
                if (result.IsValid)
                {
                    //Do something
                }
                else
                {
                    //Do something else
                }
             
                Console.WriteLine(result.Log);
            }]]>
            	</code>
            	<code lang="VB" title="Response Received Event Handler VB.NET">
            		<![CDATA[
            Public Sub Example()
                Dim emailValidator As EmailValidation = New EmailValidation() 'Trial Mode
                'Dim emailValidator As EmailValidation = New EmailValidation("place user name here", "place license key here") 'License Mode
             
                emailValidator.FromEmail = "someone@somewhere.com"
                emailValidator.FromMailServer = "mail.somewhere.com"
                 
                'Create a list of 100 email addresses with an id
                Dim emailAddresses As Dictionary(Of String, String) = New Dictionary(Of String, String)()
                 
                For i As Integer = 1 To 100
                    emailAddresses.Add(i.ToString(),String.Format("johnsmith{0}@hotmail.com", i))
                Next i
                 
                Dim options As List(Of ValidationOptions) = emailValidator.BestConnectionOptions()
                 
                'Attach Events                
                AddHandler emailValidator.ProgressEvent, AddressOf ProgressEvent
                AddHandler emailValidator.ValidationCompleteEvent, AddressOf CompletionEvent
                AddHandler emailValidator.ResponseReceivedEvent, AddressOf ResponseReceivedEvent
                 
                'Begin asynchronous validation
                emailValidator.ValidateListAsync(emailAddresses, options)
                 
                Do While emailValidator.IsBusy
                    'Sleep 1 second
                    System.Threading.Thread.Sleep(1000)
                Loop
                 
                'Remove the event connections
                RemoveHandler emailValidator.ProgressEvent, AddressOf ProgressEvent
                RemoveHandler emailValidator.ValidationCompleteEvent, AddressOf CompletionEvent
                RemoveHandler emailValidator.ResponseReceivedEvent, AddressOf ResponseReceivedEvent
            End Sub
                
             
            Public Sub CompletionEvent(ByVal sender As Object, ByVal e As AsyncCompletedEventArgs)
                Console.WriteLine("Finished. Validated emails")
            End Sub
             
            Public Sub ProgressEvent(ByVal sender As Object, ByVal args As ProgressEventArgs)
                Console.WriteLine(String.Format("{0}% ({1} of {2}", args.ProgressPercentage, args.EmailsProcessed, args.TotalEmailsToProcess))
            End Sub
             
            Public Sub ResponseReceivedEvent(ByVal sender As Object, ByVal result As Result)
                If result.IsValid Then
                    'Do something
                Else
                    'Do something else
                End If
             
                Console.WriteLine(result.Log)
            End Sub]]>
            	</code>
            </example>
        </member>
        <member name="T:KellermanSoftware.NetEmailValidation.EmailValidation.ProgressChangedEventHandler">
            <summary>Occurs when progress information is available for asynchronous processing.</summary>
            <example>
            	<code lang="CS" title="Progress Changed Event Handler CSharp">
            		<![CDATA[
            public void Example()
            {
                EmailValidation emailValidator = new EmailValidation(); //Trial Mode
                //EmailValidation emailValidator = new EmailValidation("place user name here", "place license key here"); //License Mode
                 
                emailValidator.FromEmail = "someone@somewhere.com";
                emailValidator.FromMailServer = "mail.somewhere.com";
                 
                //Create a list of 100 email addresses with an id
                Dictionary<string, string> emailAddresses = new Dictionary<string, string>();
                 
                for (int i = 1; i <= 100; i++)
                    emailAddresses.Add(i.ToString(),string.Format("johnsmith{0}@hotmail.com", i));
                 
                List<ValidationOptions> options = emailValidator.BestConnectionOptions();
                 
                //Attach Events                
                emailValidator.ProgressEvent += new EmailValidation.ProgressChangedEventHandler(ProgressEvent);
                emailValidator.ValidationCompleteEvent += new AsyncCompletedEventHandler(CompletionEvent);
                emailValidator.ResponseReceivedEvent += new EmailValidation.ResponseReceivedEventHandler(ResponseReceivedEvent);
                 
                //Begin asynchronous validation
                emailValidator.ValidateListAsync(emailAddresses, options);
                 
                while (emailValidator.IsBusy)
                {
                    //Sleep 1 second
                    System.Threading.Thread.Sleep(1000);
                }
                 
                //Remove the event connections
                emailValidator.ProgressEvent -= new EmailValidation.ProgressChangedEventHandler(ProgressEvent);
                emailValidator.ValidationCompleteEvent -= new AsyncCompletedEventHandler(CompletionEvent);
                emailValidator.ResponseReceivedEvent -= new EmailValidation.ResponseReceivedEventHandler(ResponseReceivedEvent);
            }
             
             
            public void CompletionEvent(object sender, AsyncCompletedEventArgs e)
            {
                Console.WriteLine("Finished. Validated emails");
            }
             
            public void ProgressEvent(object sender, ProgressEventArgs args)
            {
                Console.WriteLine(string.Format("{0}% ({1} of {2}", args.ProgressPercentage, args.EmailsProcessed, args.TotalEmailsToProcess));
            }
             
            public void ResponseReceivedEvent(object sender, Result result)
            {
                if (result.IsValid)
                {
                    //Do something
                }
                else
                {
                    //Do something else
                }
             
                Console.WriteLine(result.Log);
            }]]>
            	</code>
            	<code lang="VB" title="Progress Changed Event Handler VB.NET">
            		<![CDATA[
            Public Sub Example()
                Dim emailValidator As EmailValidation = New EmailValidation() 'Trial Mode
                'Dim emailValidator As EmailValidation = New EmailValidation("place user name here", "place license key here") 'License Mode
             
                emailValidator.FromEmail = "someone@somewhere.com"
                emailValidator.FromMailServer = "mail.somewhere.com"
                 
                'Create a list of 100 email addresses with an id
                Dim emailAddresses As Dictionary(Of String, String) = New Dictionary(Of String, String)()
                 
                For i As Integer = 1 To 100
                    emailAddresses.Add(i.ToString(),String.Format("johnsmith{0}@hotmail.com", i))
                Next i
                 
                Dim options As List(Of ValidationOptions) = emailValidator.BestConnectionOptions()
                 
                'Attach Events                
                AddHandler emailValidator.ProgressEvent, AddressOf ProgressEvent
                AddHandler emailValidator.ValidationCompleteEvent, AddressOf CompletionEvent
                AddHandler emailValidator.ResponseReceivedEvent, AddressOf ResponseReceivedEvent
                 
                'Begin asynchronous validation
                emailValidator.ValidateListAsync(emailAddresses, options)
                 
                Do While emailValidator.IsBusy
                    'Sleep 1 second
                    System.Threading.Thread.Sleep(1000)
                Loop
                 
                'Remove the event connections
                RemoveHandler emailValidator.ProgressEvent, AddressOf ProgressEvent
                RemoveHandler emailValidator.ValidationCompleteEvent, AddressOf CompletionEvent
                RemoveHandler emailValidator.ResponseReceivedEvent, AddressOf ResponseReceivedEvent
            End Sub
                
             
            Public Sub CompletionEvent(ByVal sender As Object, ByVal e As AsyncCompletedEventArgs)
                Console.WriteLine("Finished. Validated emails")
            End Sub
             
            Public Sub ProgressEvent(ByVal sender As Object, ByVal args As ProgressEventArgs)
                Console.WriteLine(String.Format("{0}% ({1} of {2}", args.ProgressPercentage, args.EmailsProcessed, args.TotalEmailsToProcess))
            End Sub
             
            Public Sub ResponseReceivedEvent(ByVal sender As Object, ByVal result As Result)
                If result.IsValid Then
                    'Do something
                Else
                    'Do something else
                End If
             
                Console.WriteLine(result.Log)
            End Sub]]>
            	</code>
            </example>
        </member>
        <member name="E:KellermanSoftware.NetEmailValidation.EmailValidation.ResponseReceivedEvent">
            <summary>Occurs when a validation response is received for asynchronous processing.</summary>
            <example>
            	<code lang="CS" title="Response Received Event CSharp">
            		<![CDATA[
            public void Example()
            {
                EmailValidation emailValidator = new EmailValidation(); //Trial Mode
                //EmailValidation emailValidator = new EmailValidation("place user name here", "place license key here"); //License Mode
                 
                emailValidator.FromEmail = "someone@somewhere.com";
                emailValidator.FromMailServer = "mail.somewhere.com";
                 
                //Create a list of 100 email addresses with an id
                Dictionary<string, string> emailAddresses = new Dictionary<string, string>();
                 
                for (int i = 1; i <= 100; i++)
                    emailAddresses.Add(i.ToString(),string.Format("johnsmith{0}@hotmail.com", i));
                 
                List<ValidationOptions> options = emailValidator.BestConnectionOptions();
                 
                //Attach Events                
                emailValidator.ProgressEvent += new EmailValidation.ProgressChangedEventHandler(ProgressEvent);
                emailValidator.ValidationCompleteEvent += new AsyncCompletedEventHandler(CompletionEvent);
                emailValidator.ResponseReceivedEvent += new EmailValidation.ResponseReceivedEventHandler(ResponseReceivedEvent);
                 
                //Begin asynchronous validation
                emailValidator.ValidateListAsync(emailAddresses, options);
                 
                while (emailValidator.IsBusy)
                {
                    //Sleep 1 second
                    System.Threading.Thread.Sleep(1000);
                }
                 
                //Remove the event connections
                emailValidator.ProgressEvent -= new EmailValidation.ProgressChangedEventHandler(ProgressEvent);
                emailValidator.ValidationCompleteEvent -= new AsyncCompletedEventHandler(CompletionEvent);
                emailValidator.ResponseReceivedEvent -= new EmailValidation.ResponseReceivedEventHandler(ResponseReceivedEvent);
            }
             
             
            public void CompletionEvent(object sender, AsyncCompletedEventArgs e)
            {
                Console.WriteLine("Finished. Validated emails");
            }
             
            public void ProgressEvent(object sender, ProgressEventArgs args)
            {
                Console.WriteLine(string.Format("{0}% ({1} of {2}", args.ProgressPercentage, args.EmailsProcessed, args.TotalEmailsToProcess));
            }
             
            public void ResponseReceivedEvent(object sender, Result result)
            {
                if (result.IsValid)
                {
                    //Do something
                }
                else
                {
                    //Do something else
                }
             
                Console.WriteLine(result.Log);
            }]]>
            	</code>
            	<code lang="VB" title="Response Received Event VB.NET">
            		<![CDATA[
            Public Sub Example()
                Dim emailValidator As EmailValidation = New EmailValidation() 'Trial Mode
                'Dim emailValidator As EmailValidation = New EmailValidation("place user name here", "place license key here") 'License Mode
             
                emailValidator.FromEmail = "someone@somewhere.com"
                emailValidator.FromMailServer = "mail.somewhere.com"
                 
                'Create a list of 100 email addresses with an id
                Dim emailAddresses As Dictionary(Of String, String) = New Dictionary(Of String, String)()
                 
                For i As Integer = 1 To 100
                    emailAddresses.Add(i.ToString(),String.Format("johnsmith{0}@hotmail.com", i))
                Next i
                 
                Dim options As List(Of ValidationOptions) = emailValidator.BestConnectionOptions()
                 
                'Attach Events                
                AddHandler emailValidator.ProgressEvent, AddressOf ProgressEvent
                AddHandler emailValidator.ValidationCompleteEvent, AddressOf CompletionEvent
                AddHandler emailValidator.ResponseReceivedEvent, AddressOf ResponseReceivedEvent
                 
                'Begin asynchronous validation
                emailValidator.ValidateListAsync(emailAddresses, options)
                 
                Do While emailValidator.IsBusy
                    'Sleep 1 second
                    System.Threading.Thread.Sleep(1000)
                Loop
                 
                'Remove the event connections
                RemoveHandler emailValidator.ProgressEvent, AddressOf ProgressEvent
                RemoveHandler emailValidator.ValidationCompleteEvent, AddressOf CompletionEvent
                RemoveHandler emailValidator.ResponseReceivedEvent, AddressOf ResponseReceivedEvent
            End Sub
                
             
            Public Sub CompletionEvent(ByVal sender As Object, ByVal e As AsyncCompletedEventArgs)
                Console.WriteLine("Finished. Validated emails")
            End Sub
             
            Public Sub ProgressEvent(ByVal sender As Object, ByVal args As ProgressEventArgs)
                Console.WriteLine(String.Format("{0}% ({1} of {2}", args.ProgressPercentage, args.EmailsProcessed, args.TotalEmailsToProcess))
            End Sub
             
            Public Sub ResponseReceivedEvent(ByVal sender As Object, ByVal result As Result)
                If result.IsValid Then
                    'Do something
                Else
                    'Do something else
                End If
             
                Console.WriteLine(result.Log)
            End Sub]]>
            	</code>
            </example>
        </member>
        <member name="E:KellermanSoftware.NetEmailValidation.EmailValidation.ValidationCompleteEvent">
            <summary>Occurs when validation is complete for asynchronous validation.</summary>
            <example>
            	<code lang="CS" title="Validation Complete Event CSharp">
            		<![CDATA[
            public void Example()
            {
                EmailValidation emailValidator = new EmailValidation(); //Trial Mode
                //EmailValidation emailValidator = new EmailValidation("place user name here", "place license key here"); //License Mode
                 
                emailValidator.FromEmail = "someone@somewhere.com";
                emailValidator.FromMailServer = "mail.somewhere.com";
                 
                //Create a list of 100 email addresses with an id
                Dictionary<string, string> emailAddresses = new Dictionary<string, string>();
                 
                for (int i = 1; i <= 100; i++)
                    emailAddresses.Add(i.ToString(),string.Format("johnsmith{0}@hotmail.com", i));
                 
                List<ValidationOptions> options = emailValidator.BestConnectionOptions();
                 
                //Attach Events                
                emailValidator.ProgressEvent += new EmailValidation.ProgressChangedEventHandler(ProgressEvent);
                emailValidator.ValidationCompleteEvent += new AsyncCompletedEventHandler(CompletionEvent);
                emailValidator.ResponseReceivedEvent += new EmailValidation.ResponseReceivedEventHandler(ResponseReceivedEvent);
                 
                //Begin asynchronous validation
                emailValidator.ValidateListAsync(emailAddresses, options);
                 
                while (emailValidator.IsBusy)
                {
                    //Sleep 1 second
                    System.Threading.Thread.Sleep(1000);
                }
                 
                //Remove the event connections
                emailValidator.ProgressEvent -= new EmailValidation.ProgressChangedEventHandler(ProgressEvent);
                emailValidator.ValidationCompleteEvent -= new AsyncCompletedEventHandler(CompletionEvent);
                emailValidator.ResponseReceivedEvent -= new EmailValidation.ResponseReceivedEventHandler(ResponseReceivedEvent);
            }
             
             
            public void CompletionEvent(object sender, AsyncCompletedEventArgs e)
            {
                Console.WriteLine("Finished. Validated emails");
            }
             
            public void ProgressEvent(object sender, ProgressEventArgs args)
            {
                Console.WriteLine(string.Format("{0}% ({1} of {2}", args.ProgressPercentage, args.EmailsProcessed, args.TotalEmailsToProcess));
            }
             
            public void ResponseReceivedEvent(object sender, Result result)
            {
                if (result.IsValid)
                {
                    //Do something
                }
                else
                {
                    //Do something else
                }
             
                Console.WriteLine(result.Log);
            }]]>
            	</code>
            	<code lang="VB" title="Validation Complete Event VB.NET">
            		<![CDATA[
            Public Sub Example()
                Dim emailValidator As EmailValidation = New EmailValidation() 'Trial Mode
                'Dim emailValidator As EmailValidation = New EmailValidation("place user name here", "place license key here") 'License Mode
             
                emailValidator.FromEmail = "someone@somewhere.com"
                emailValidator.FromMailServer = "mail.somewhere.com"
                 
                'Create a list of 100 email addresses with an id
                Dim emailAddresses As Dictionary(Of String, String) = New Dictionary(Of String, String)()
                 
                For i As Integer = 1 To 100
                    emailAddresses.Add(i.ToString(),String.Format("johnsmith{0}@hotmail.com", i))
                Next i
                 
                Dim options As List(Of ValidationOptions) = emailValidator.BestConnectionOptions()
                 
                'Attach Events                
                AddHandler emailValidator.ProgressEvent, AddressOf ProgressEvent
                AddHandler emailValidator.ValidationCompleteEvent, AddressOf CompletionEvent
                AddHandler emailValidator.ResponseReceivedEvent, AddressOf ResponseReceivedEvent
                 
                'Begin asynchronous validation
                emailValidator.ValidateListAsync(emailAddresses, options)
                 
                Do While emailValidator.IsBusy
                    'Sleep 1 second
                    System.Threading.Thread.Sleep(1000)
                Loop
                 
                'Remove the event connections
                RemoveHandler emailValidator.ProgressEvent, AddressOf ProgressEvent
                RemoveHandler emailValidator.ValidationCompleteEvent, AddressOf CompletionEvent
                RemoveHandler emailValidator.ResponseReceivedEvent, AddressOf ResponseReceivedEvent
            End Sub
                
             
            Public Sub CompletionEvent(ByVal sender As Object, ByVal e As AsyncCompletedEventArgs)
                Console.WriteLine("Finished. Validated emails")
            End Sub
             
            Public Sub ProgressEvent(ByVal sender As Object, ByVal args As ProgressEventArgs)
                Console.WriteLine(String.Format("{0}% ({1} of {2}", args.ProgressPercentage, args.EmailsProcessed, args.TotalEmailsToProcess))
            End Sub
             
            Public Sub ResponseReceivedEvent(ByVal sender As Object, ByVal result As Result)
                If result.IsValid Then
                    'Do something
                Else
                    'Do something else
                End If
             
                Console.WriteLine(result.Log)
            End Sub]]>
            	</code>
            </example>
        </member>
        <member name="E:KellermanSoftware.NetEmailValidation.EmailValidation.ProgressEvent">
            <summary>
            Occurs when progress information is available for asynchronous email
            validation.
            </summary>
            <example>
            	<code lang="CS" title="Progress Event CSharp">
            		<![CDATA[
            public void Example()
            {
                EmailValidation emailValidator = new EmailValidation(); //Trial Mode
                //EmailValidation emailValidator = new EmailValidation("place user name here", "place license key here"); //License Mode
                 
                emailValidator.FromEmail = "someone@somewhere.com";
                emailValidator.FromMailServer = "mail.somewhere.com";
                 
                //Create a list of 100 email addresses with an id
                Dictionary<string, string> emailAddresses = new Dictionary<string, string>();
                 
                for (int i = 1; i <= 100; i++)
                    emailAddresses.Add(i.ToString(),string.Format("johnsmith{0}@hotmail.com", i));
                 
                List<ValidationOptions> options = emailValidator.BestConnectionOptions();
                 
                //Attach Events                
                emailValidator.ProgressEvent += new EmailValidation.ProgressChangedEventHandler(ProgressEvent);
                emailValidator.ValidationCompleteEvent += new AsyncCompletedEventHandler(CompletionEvent);
                emailValidator.ResponseReceivedEvent += new EmailValidation.ResponseReceivedEventHandler(ResponseReceivedEvent);
                 
                //Begin asynchronous validation
                emailValidator.ValidateListAsync(emailAddresses, options);
                 
                while (emailValidator.IsBusy)
                {
                    //Sleep 1 second
                    System.Threading.Thread.Sleep(1000);
                }
                 
                //Remove the event connections
                emailValidator.ProgressEvent -= new EmailValidation.ProgressChangedEventHandler(ProgressEvent);
                emailValidator.ValidationCompleteEvent -= new AsyncCompletedEventHandler(CompletionEvent);
                emailValidator.ResponseReceivedEvent -= new EmailValidation.ResponseReceivedEventHandler(ResponseReceivedEvent);
            }
             
             
            public void CompletionEvent(object sender, AsyncCompletedEventArgs e)
            {
                Console.WriteLine("Finished. Validated emails");
            }
             
            public void ProgressEvent(object sender, ProgressEventArgs args)
            {
                Console.WriteLine(string.Format("{0}% ({1} of {2}", args.ProgressPercentage, args.EmailsProcessed, args.TotalEmailsToProcess));
            }
             
            public void ResponseReceivedEvent(object sender, Result result)
            {
                if (result.IsValid)
                {
                    //Do something
                }
                else
                {
                    //Do something else
                }
             
                Console.WriteLine(result.Log);
            }]]>
            	</code>
            	<code lang="VB" title="Progress Event VB.NET">
            		<![CDATA[
            Public Sub Example()
                Dim emailValidator As EmailValidation = New EmailValidation() 'Trial Mode
                'Dim emailValidator As EmailValidation = New EmailValidation("place user name here", "place license key here") 'License Mode
             
                emailValidator.FromEmail = "someone@somewhere.com"
                emailValidator.FromMailServer = "mail.somewhere.com"
                 
                'Create a list of 100 email addresses with an id
                Dim emailAddresses As Dictionary(Of String, String) = New Dictionary(Of String, String)()
                 
                For i As Integer = 1 To 100
                    emailAddresses.Add(i.ToString(),String.Format("johnsmith{0}@hotmail.com", i))
                Next i
                 
                Dim options As List(Of ValidationOptions) = emailValidator.BestConnectionOptions()
                 
                'Attach Events                
                AddHandler emailValidator.ProgressEvent, AddressOf ProgressEvent
                AddHandler emailValidator.ValidationCompleteEvent, AddressOf CompletionEvent
                AddHandler emailValidator.ResponseReceivedEvent, AddressOf ResponseReceivedEvent
                 
                'Begin asynchronous validation
                emailValidator.ValidateListAsync(emailAddresses, options)
                 
                Do While emailValidator.IsBusy
                    'Sleep 1 second
                    System.Threading.Thread.Sleep(1000)
                Loop
                 
                'Remove the event connections
                RemoveHandler emailValidator.ProgressEvent, AddressOf ProgressEvent
                RemoveHandler emailValidator.ValidationCompleteEvent, AddressOf CompletionEvent
                RemoveHandler emailValidator.ResponseReceivedEvent, AddressOf ResponseReceivedEvent
            End Sub
                
             
            Public Sub CompletionEvent(ByVal sender As Object, ByVal e As AsyncCompletedEventArgs)
                Console.WriteLine("Finished. Validated emails")
            End Sub
             
            Public Sub ProgressEvent(ByVal sender As Object, ByVal args As ProgressEventArgs)
                Console.WriteLine(String.Format("{0}% ({1} of {2}", args.ProgressPercentage, args.EmailsProcessed, args.TotalEmailsToProcess))
            End Sub
             
            Public Sub ResponseReceivedEvent(ByVal sender As Object, ByVal result As Result)
                If result.IsValid Then
                    'Do something
                Else
                    'Do something else
                End If
             
                Console.WriteLine(result.Log)
            End Sub]]>
            	</code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.EmailValidation.UserMessages">
            <summary>
            Change user messages for validation errors
            </summary>
            <remarks>
              <para>
                <strong>Default Values</strong>
              </para>
              <para></para>
              <para>UserMessageType.ThankYou = "Thank you for entering a valid email address."<br />
            UserMessageType.BlackListed = "Please enter a different email address. The domain \"0}\" or email is on our black list."<br />
            UserMessageType.EmailAddressBlank = "Email address blank.  Please enter an email address."<br />
            UserMessageType.ExceptionOccurred = "An exception occurred while validating the email address \"0}\" please notify the system administrator."<br />
            UserMessageType.FailedBasicSyntax = "The format of the email address is invalid. Please check @ and periods."<br />
            UserMessageType.FailedPublicWebsite = "The domain \"0}\" does not have an associated public website. Please enter a different email address."<br />
            UserMessageType.FailedCurseWords = "Curse words have been detected in your email address. This is not allowed on our system."<br />
            UserMessageType.FailedDisposableEmail = "Disposable email addresses are not allowed on this system. Please enter a different email address."<br />
            UserMessageType.FailedFreeEmail = "Our security policies prohibit the use of free email addresses. Please enter a different email address."<br />
            UserMessageType.FailedTypo = "The domain \"0}\" is invalid.  Please check for typos."<br />
            UserMessageType.FailedFakeEmailPatternMatcher = "Fake email detected. Please enter a real email address. Fake Email Pattern Checker Rev 1.23."<br />
            UserMessageType.FailedKnownDomainEnding = "The domain \"0}\" is not a known domain. Please enter a valid email address."<br />
            UserMessageType.FailedMailboxCheck = "The user \"0}\" does not have a valid mailbox on \"1}\". Please enter a valid email address."<br />
            UserMessageType.FailedMailServerExists = "Could not find an email server for the domain \"0}\". Please enter a valid email address."<br />
            UserMessageType.FailedSmtpConnect = "Could not connect to the mail server for the domain \"0}\". Please enter a different email address."<br />
            UserMessageType.Blocked = "The domain \"0}\" is actively blocking email from our server. Please enter a different email address."<br />
            UserMessageType.MailboxQuotaExceeded = "The email address \"0}\" currently cannot receive email.  Please enter a different email address."<br />
            UserMessageType.TimeoutExceeded = "The mail server \"0}\" did not respond in a timely manner."<br />
            UserMessageType.NoMxRecordsFound = "No Mx Records Found"<br />
            UserMessageType.Greylisted = "Grey Listed server, cannot determine if email is valid.  Assuming valid."<br />
            UserMessageType.Restricted = "Restricted or busy server, cannot determine if email is valid. Assuming valid."<br />
            UserMessageType.Unresponsive = "Unresponsive server, cannot determine if email is valid. Assuming valid."<br />
            UserMessageType.OverQuota = "Mailbox over quota, assuming valid."
            UserMessageType.FailedCatchAllDomainCheck =, "Could not perform a catch all domain check for the domain \"{0}\""
            </para>
            </remarks>
            <example>
              <code title="Example" description="" lang="CS">
            EmailValidation valid = new EmailValidation();
            valid.FromEmail = "jane.doe@hotmail.com";
            valid.FromMailServer = "mail.hotmail.com";
             
            string userMessage = "The email address entered is in an invalid format.  Please try again.";
            valid.UserMessages[UserMessageType.FailedBasicSyntax] = userMessage;
            List&lt;ValidationOptions&gt; options = valid.NoConnectOptions;
            Result result = valid.ValidEmail("john.doe@@hotmail.com", options);
            Console.WriteLine(result.UserMessage);</code>
              <code title="Example2" description="" lang="VB.NET">
            Dim valid As New EmailValidation()
            valid.FromEmail = "jane.doe@hotmail.com"
            valid.FromMailServer = "mail.hotmail.com"
             
            Dim userMessage As String = "The email address entered is in an invalid format.  Please try again."
            valid.UserMessages(UserMessageType.FailedBasicSyntax) = userMessage
            Dim options As List(Of ValidationOptions) = valid.NoConnectOptions
            Dim result As Result = valid.ValidEmail("john.doe@@hotmail.com", options)
            Console.WriteLine(result.UserMessage)</code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.EmailValidation.DnsServer">
            <summary>
            Override the default DNS Server to use when retrieving MX Records
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.EmailValidation.ConnectionChecking">
            <summary>
            By default when the .NET Email Validation Library first attempts a connection it verifies it is connected to the internet, port 25 is open, and MxRecords can be retrieved.  
            This behavior is on by default.  
            To increase performance when validating a single email address and always connected to the internet, set this property to false.
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.EmailValidation.SmtpPort">
            <summary>
            The Port to connect to the SMTP Server. Default is 25
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.EmailValidation.SmtpTimeout">
            <summary>
            The number of milliseconds to wait until an SMTP Server responds.  The default is 30,000 milliseconds (30 seconds)
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.EmailValidation.BestConnectionMessage">
            <summary>
            Returns a user friendly message indicating why some options were disabled
            </summary>
            <example>
            	<code lang="CS" title="Best Connection Message CSharp">
            		<![CDATA[
            EmailValidation emailValidator = new EmailValidation(); //Trial Mode
            //EmailValidation emailValidator = new EmailValidation("place user name here", "place license key here"); //License Mode
                 
            emailValidator.FromEmail = "someone@somewhere.com";
            emailValidator.FromMailServer = "mail.somewhere.com";
             
            //Connect using the best available options
            List<ValidationOptions> options = emailValidator.BestConnectionOptions();
            Console.WriteLine(emailValidator.BestConnectionMessage);
             
            //Validate a single email with the best available options
            Result myResult = emailValidator.ValidEmail("john.smith@hotmail.com", options);
             
            //Print the results to the console
            Console.WriteLine(myResult.UserMessage);
            Console.WriteLine();
            Console.WriteLine(myResult.StatusDescription);
            Console.WriteLine();
            Console.WriteLine(myResult.Log);]]>
            	</code>
            	<code lang="VB" title="Best Connection Message VB.NET">
            		<![CDATA[
            Dim emailValidator As EmailValidation = New EmailValidation() 'Trial Mode
            'Dim emailValidator As EmailValidation = New EmailValidation("place user name here", "place license key here") 'License Mode
             
            emailValidator.FromEmail = "someone@somewhere.com"
            emailValidator.FromMailServer = "mail.somewhere.com"
             
            'Connect using the best available options
            Dim options As List(Of ValidationOptions) = emailValidator.BestConnectionOptions()
            Console.WriteLine(emailValidator.BestConnectionMessage)
             
            'Validate a single email with the best available options
            Dim myResult As Result = emailValidator.ValidEmail("john.smith@hotmail.com", options)
             
            'Print the results to the console
            Console.WriteLine(myResult.UserMessage)
            Console.WriteLine()
            Console.WriteLine(myResult.StatusDescription)
            Console.WriteLine()
            Console.WriteLine(myResult.Log)]]>
            	</code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.EmailValidation.Proxy">
            <summary>
            Set the Socks 4 or 5 Proxy.  Defaults to None
            </summary>
            <example>
              <code title="Example" description="" lang="CS">
            EmailValidation emailValidator = new EmailValidation(); //Trial Mode
            //EmailValidation emailValidator = new EmailValidation("place user name here", "place license key here"); //License Mode
             
            validation.FromEmail = "someone@somewhere.com";
            validation.FromMailServer = "mail.somewhere.com";
             
            //Setup Proxy Information
            ProxyInfo proxyInfo = new ProxyInfo();
            proxyInfo.Port = 1080;
            proxyInfo.Type = ProxyType.Socks5;
            proxyInfo.UserName = "MyUserName";
            proxyInfo.Password = "MyPassword";
            proxyInfo.Host = "TheProxyName";
            validation.Proxy = proxyInfo;
             
            //Validate the email
            List&lt;ValidationOptions&gt; options = validation.DefaultOptions;
            Result result = validation.ValidEmail("someone@somewhere.com", validation.DefaultOptions);
             
            Console.WriteLine(result.UserMessage);
             
            Console.WriteLine(result.Log);</code>
              <code title="Example2" description="" lang="VB.NET">
            Dim emailValidator As New EmailValidation() 'Trial Mode
            'EmailValidation emailValidator = new EmailValidation("place user name here", "place license key here"); //License Mode
             
            validation.FromEmail = "someone@somewhere.com"
            validation.FromMailServer = "mail.somewhere.com"
             
            'Setup Proxy Information
            Dim proxyInfo As New ProxyInfo()
            proxyInfo.Port = 1080
            proxyInfo.Type = ProxyType.Socks5
            proxyInfo.UserName = "MyUserName"
            proxyInfo.Password = "MyPassword"
            proxyInfo.Host = "TheProxyName"
            validation.Proxy = proxyInfo
             
            'Validate the email
            Dim options As List(Of ValidationOptions) = validation.DefaultOptions
            Dim result As Result = validation.ValidEmail("someone@somewhere.com", validation.DefaultOptions)
             
            Console.WriteLine(result.UserMessage)
             
            Console.WriteLine(result.Log)</code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.EmailValidation.LocalEndPoint">
            <summary>
             LocalEndPoint for connection. Use null if you want the system to assign your socket's local IP address 
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.EmailValidation.NoConnectOptions">
            <summary>
            	<para>A list of predefined options to validate email addresses without using an
                internet connection. These options are:</para>
            	<para>BasicSyntax<br/>
                BlackList<br/>
                FakeEmailPatternMatcher<br/>
                DisallowCurseWords<br/>
                DisallowDisposableEmail<br/>
                KnownDomainEnding<br/>
                NotBlank<br/>
                WhiteList<br/>
                TypoChecking</para>
            </summary>
            <example>
            	<code title="No Connect Options CSharp">
            		<![CDATA[
            EmailValidation emailValidator = new EmailValidation(); //Trial Mode
            //EmailValidation emailValidator = new EmailValidation("place user name here", "place license key here"); //License Mode
             
            //Connect using no internet connection
            List<ValidationOptions> options = emailValidator.NoConnectOptions;
             
            //Validate a single email with no connection to the internet required
            Result myResult = emailValidator.ValidEmail("john.smith@hotmail.com", options);
             
            //Print the results to the console
            Console.WriteLine(myResult.UserMessage);
            Console.WriteLine();
            Console.WriteLine(myResult.StatusDescription);
            Console.WriteLine();
            Console.WriteLine(myResult.Log);]]>
            	</code>
            	<code lang="VB" title="No Connect Options VB.NET">
            		<![CDATA[
            Dim emailValidator As EmailValidation = New EmailValidation() 'Trial Mode
            'Dim emailValidator As EmailValidation = New EmailValidation("place user name here", "place license key here") 'License Mode
             
            emailValidator.FromEmail = "someone@somewhere.com"
            emailValidator.FromMailServer = "mail.somewhere.com"
             
            'Connect using no internet connection
            Dim options As List(Of ValidationOptions) = emailValidator.NoConnectOptions
             
            'Validate a single email with no connection to the internet required
            Dim myResult As Result = emailValidator.ValidEmail("john.smith@hotmail.com", options)
             
            'Print the results to the console
            Console.WriteLine(myResult.UserMessage)
            Console.WriteLine()
            Console.WriteLine(myResult.StatusDescription)
            Console.WriteLine()
            Console.WriteLine(myResult.Log)]]>
            	</code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.EmailValidation.DefaultOptions">
            <summary>
            	<para>The default options used when email validation is performed. The defaults
                are:</para>
            	<para>BasicSyntax<br/>
                BlackList<br/>
                FakeEmailPatternMatcher<br/>
                DisallowCurseWords<br/>
                DisallowDisposableEmail<br/>
                KnownDomainEnding<br/>
                MailboxExists<br/>
                MailServerExists<br/>
                NotBlank<br/>
                SmtpConnect<br/>
                WhiteList<br/>
                FailOnQuotaExceeded<br/>
                TypoChecking</para>
            </summary>
            <example>
            	<code lang="CS" title="Default Options CSharp">
            		<![CDATA[
            EmailValidation emailValidator = new EmailValidation(); //Trial Mode
            //EmailValidation emailValidator = new EmailValidation("place user name here", "place license key here"); //License Mode
                 
            emailValidator.FromEmail = "someone@somewhere.com";
            emailValidator.FromMailServer = "mail.somewhere.com";
             
            //Validate a single email with the best available options
            Result myResult = emailValidator.ValidEmail("john.smith@hotmail.com", emailValidator.DefaultOptions);
             
            //Print the results to the console
            Console.WriteLine(myResult.UserMessage);
            Console.WriteLine();
            Console.WriteLine(myResult.StatusDescription);
            Console.WriteLine();
            Console.WriteLine(myResult.Log);]]>
            	</code>
            	<code lang="VB" title="Default Options VB.NET">
            		<![CDATA[
            Dim emailValidator As EmailValidation = New EmailValidation() 'Trial Mode
            'Dim emailValidator As EmailValidation = New EmailValidation("place user name here", "place license key here") 'License Mode
             
            emailValidator.FromEmail = "someone@somewhere.com"
            emailValidator.FromMailServer = "mail.somewhere.com"
             
            'Validate a single email with the best available options
            Dim myResult As Result = emailValidator.ValidEmail("john.smith@hotmail.com", emailValidator.DefaultOptions)
             
            'Print the results to the console
            Console.WriteLine(myResult.UserMessage)
            Console.WriteLine()
            Console.WriteLine(myResult.StatusDescription)
            Console.WriteLine()
            Console.WriteLine(myResult.Log)]]>
            	</code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.EmailValidation.MaxThreads">
            <summary>
            The maximum number of threads to use to validate emails simultaneously
            </summary>
            <example>
            	<code lang="CS" title="Max Threads CSharp">
            		<![CDATA[
            EmailValidation emailValidator = new EmailValidation(); //Trial Mode
            //EmailValidation emailValidator = new EmailValidation("place user name here", "place license key here"); //License Mode
                 
            emailValidator.FromEmail = "someone@somewhere.com";
            emailValidator.FromMailServer = "mail.somewhere.com";
             
            //Set the maximum threads to a low number (minimum is # of processors)
            emailValidator.MaxThreads=5;
             
            //Create a list of 100 email addresses
            List<string> emailAddresses = new List<string>();
             
            for (int i = 1; i <= 100; i++)
                emailAddresses.Add(string.Format("johnsmith{0}@hotmail.com", i));
             
            //Begin asynchronous validation
            emailValidator.ValidateListAsync(emailAddresses);
             
            while (emailValidator.IsBusy)
            {
                Console.WriteLine(string.Format("{0} of {1}", emailValidator.EmailsProcessed,emailValidator.TotalEmailsToProcess));
             
                //Sleep 1 second
                System.Threading.Thread.Sleep(1000);
            }]]>
            	</code>
            	<code lang="VB" title="Max Threads VB.NET">
            		<![CDATA[
            Dim emailValidator As EmailValidation = New EmailValidation() 'Trial Mode
            'Dim emailValidator As EmailValidation = New EmailValidation("place user name here", "place license key here") 'License Mode
             
            emailValidator.FromEmail = "someone@somewhere.com"
            emailValidator.FromMailServer = "mail.somewhere.com"
             
            'Set the maximum threads to a low number (minimum is # of processors)
            emailValidator.MaxThreads=5
             
            'Create a list of 100 email addresses
            Dim emailAddresses As List(Of String) = New List(Of String)()
             
            For i As Integer = 1 To 100
                emailAddresses.Add(String.Format("johnsmith{0}@hotmail.com", i))
            Next i
             
            'Begin asynchronous validation
            emailValidator.ValidateListAsync(emailAddresses)
             
            Do While emailValidator.IsBusy
                Console.WriteLine(String.Format("{0} of {1}", emailValidator.EmailsProcessed,emailValidator.TotalEmailsToProcess))
             
                'Sleep 1 second
                System.Threading.Thread.Sleep(1000)
            Loop]]>
            	</code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.EmailValidation.IsBusy">
            <summary>If true, we are actively validating emails.</summary>
            <example>
            	<code lang="CS" title="Is Busy CSharp">
            		<![CDATA[
            EmailValidation emailValidator = new EmailValidation(); //Trial Mode
            //EmailValidation emailValidator = new EmailValidation("place user name here", "place license key here"); //License Mode
                 
            emailValidator.FromEmail = "someone@somewhere.com";
            emailValidator.FromMailServer = "mail.somewhere.com";
             
            //Create a list of 100 email addresses
            List<string> emailAddresses = new List<string>();
             
            for (int i = 1; i <= 100; i++)
                emailAddresses.Add(string.Format("johnsmith{0}@hotmail.com", i));
             
            //Begin asynchronous validation
            emailValidator.ValidateListAsync(emailAddresses);
             
            while (emailValidator.IsBusy)
            {
                Console.WriteLine(string.Format("{0} of {1}", emailValidator.EmailsProcessed,emailValidator.TotalEmailsToProcess));
             
                //Sleep 1 second
                System.Threading.Thread.Sleep(1000);
            }]]>
            	</code>
            	<code lang="VB" title="Is Busy VB.NET">
            		<![CDATA[
            Dim emailValidator As EmailValidation = New EmailValidation() 'Trial Mode
            'Dim emailValidator As EmailValidation = New EmailValidation("place user name here", "place license key here") 'License Mode
             
            emailValidator.FromEmail = "someone@somewhere.com"
            emailValidator.FromMailServer = "mail.somewhere.com"
             
            'Create a list of 100 email addresses
            Dim emailAddresses As List(Of String) = New List(Of String)()
             
            For i As Integer = 1 To 100
                emailAddresses.Add(String.Format("johnsmith{0}@hotmail.com", i))
            Next i
             
            'Begin asynchronous validation
            emailValidator.ValidateListAsync(emailAddresses)
             
            Do While emailValidator.IsBusy
                Console.WriteLine(String.Format("{0} of {1}", emailValidator.EmailsProcessed,emailValidator.TotalEmailsToProcess))
             
                'Sleep 1 second
                System.Threading.Thread.Sleep(1000)
            Loop]]>
            	</code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.EmailValidation.Cancel">
            <summary>
            Set to true to cancel asynchronous email validation
            </summary>
            <example>
            	<code lang="CS" title="Cancel CSharp">
            		<![CDATA[
            EmailValidation emailValidator = new EmailValidation(); //Trial Mode
            //EmailValidation emailValidator = new EmailValidation("place user name here", "place license key here"); //License Mode
                 
            emailValidator.FromEmail = "someone@somewhere.com";
            emailValidator.FromMailServer = "mail.somewhere.com";
             
            //Create a list of 1000 email addresses
            List<string> emailAddresses= new List<string>();
             
            for (int i=1;i<=1000;i++)
                emailAddresses.Add(string.Format("johnsmith{0}@hotmail.com",i));
             
            //Begin asynchronous validation
            emailValidator.ValidateListAsync(emailAddresses);
             
            while (emailValidator.IsBusy)
            {
                //Cancel
                emailValidator.Cancel = true;
            }]]>
            	</code>
            	<code lang="VB" title="Cancel VB.NET">
            		<![CDATA[
            Dim emailValidator As EmailValidation = New EmailValidation() 'Trial Mode
            'Dim emailValidator As EmailValidation = New EmailValidation("place user name here", "place license key here") 'License Mode
             
            emailValidator.FromEmail = "someone@somewhere.com"
            emailValidator.FromMailServer = "mail.somewhere.com"
             
            'Create a list of 1000 email addresses
            Dim emailAddresses As List(Of String)= New List(Of String)()
             
            For i As Integer = 1 To 1000
                emailAddresses.Add(String.Format("johnsmith{0}@hotmail.com",i))
            Next i
             
            'Begin asynchronous validation
            emailValidator.ValidateListAsync(emailAddresses)
             
            Do While emailValidator.IsBusy
                'Cancel
                emailValidator.Cancel = True
            Loop]]>
            	</code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.EmailValidation.FromEmail">
            <summary>
            The email address to use as the from address when doing an SMTP Mailbox Check.
            The default is null
            </summary>
            <example>
            	<code lang="CS" title="From Email CSharp">
            		<![CDATA[
            EmailValidation emailValidator = new EmailValidation(); //Trial Mode
            //EmailValidation emailValidator = new EmailValidation("place user name here", "place license key here"); //License Mode
             
            emailValidator.FromEmail = "john.smith@hotmail.com";]]>
            	</code>
            	<code lang="VB" title="From Email VB.NET">
            		<![CDATA[
            Dim emailValidator As EmailValidation = New EmailValidation() 'Trial Mode
            'Dim emailValidator As EmailValidation = New EmailValidation("place user name here", "place license key here") 'License Mode
             
            emailValidator.FromEmail = "john.smith@hotmail.com"]]>
            	</code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.EmailValidation.FromMailServer">
            <summary>
            The mail server to use as the from address when doing an SMTP Mailbox Check. The default is null
            </summary>
            <example>
            	<code lang="CS" title="From Mail Server CSharp">
            		<![CDATA[
            EmailValidation emailValidator = new EmailValidation(); //Trial Mode
            //EmailValidation emailValidator = new EmailValidation("place user name here", "place license key here"); //License Mode
             
            emailValidator.FromMailServer = "hotmail.com";]]>
            	</code>
            	<code lang="VB" title="From Mail Server VB.NET">
            		<![CDATA[
            Dim emailValidator As EmailValidation = New EmailValidation() 'Trial Mode
            'Dim emailValidator As EmailValidation = New EmailValidation("place user name here", "place license key here") 'License Mode
             
            emailValidator.FromMailServer = "hotmail.com"]]>
            	</code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.EmailValidation.EmailsProcessed">
            <summary>The number of emails that have been validated asynchronously</summary>
            <example>
            	<code lang="CS" title="Emails Processed CSharp">
            		<![CDATA[
            EmailValidation emailValidator = new EmailValidation(); //Trial Mode
            //EmailValidation emailValidator = new EmailValidation("place user name here", "place license key here"); //License Mode
                 
            emailValidator.FromEmail = "someone@somewhere.com";
            emailValidator.FromMailServer = "mail.somewhere.com";
             
            //Validate a single email with the best available options
            Result myResult = emailValidator.ValidEmail("john.smith@hotmail.com", emailValidator.DefaultOptions);
             
            //Print the results to the console
            Console.WriteLine(emailValidator.EmailsProcessed);]]>
            	</code>
            	<code lang="VB" title="Emails Processed VB.NET">
            		<![CDATA[
            Dim emailValidator As EmailValidation = New EmailValidation() 'Trial Mode
            'Dim emailValidator As EmailValidation = New EmailValidation("place user name here", "place license key here") 'License Mode
             
            emailValidator.FromEmail = "someone@somewhere.com"
            emailValidator.FromMailServer = "mail.somewhere.com"
             
            'Validate a single email with the best available options
            Dim myResult As Result = emailValidator.ValidEmail("john.smith@hotmail.com", emailValidator.DefaultOptions)
             
            'Print the results to the console
            Console.WriteLine(emailValidator.EmailsProcessed)]]>
            	</code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.EmailValidation.TotalEmailsToProcess">
            <summary>
            The total number of emails to validate
            </summary>
            <example>
            	<code lang="CS" title="Total Emails To Process CSharp">
            		<![CDATA[
            EmailValidation emailValidator = new EmailValidation(); //Trial Mode
            //EmailValidation emailValidator = new EmailValidation("place user name here", "place license key here"); //License Mode
                 
            emailValidator.FromEmail = "someone@somewhere.com";
            emailValidator.FromMailServer = "mail.somewhere.com";
             
            //Create a list of 100 email addresses
            List<string> emailAddresses = new List<string>();
             
            for (int i = 1; i <= 100; i++)
                emailAddresses.Add(string.Format("johnsmith{0}@hotmail.com", i));
             
            //Begin asynchronous validation
            emailValidator.ValidateListAsync(emailAddresses);
             
            while (emailValidator.IsBusy)
            {
                Console.WriteLine(string.Format("{0} of {1}", 
                    emailValidator.EmailsProcessed, 
                    emailValidator.TotalEmailsToProcess));
             
                //Sleep 1 second
                System.Threading.Thread.Sleep(1000);
            }]]>
            	</code>
            	<code lang="VB" title="Total Emails To Process VB.NET">
            		<![CDATA[
            Dim emailValidator As EmailValidation = New EmailValidation() 'Trial Mode
            'Dim emailValidator As EmailValidation = New EmailValidation("place user name here", "place license key here") 'License Mode
             
            emailValidator.FromEmail = "someone@somewhere.com"
            emailValidator.FromMailServer = "mail.somewhere.com"
             
            'Create a list of 100 email addresses
            Dim emailAddresses As List(Of String) = New List(Of String)()
             
            For i As Integer = 1 To 100
                emailAddresses.Add(String.Format("johnsmith{0}@hotmail.com", i))
            Next i
             
            'Begin asynchronous validation
            emailValidator.ValidateListAsync(emailAddresses)
             
            Do While emailValidator.IsBusy
                Console.WriteLine(String.Format("{0} of {1}", emailValidator.EmailsProcessed, emailValidator.TotalEmailsToProcess))
             
                'Sleep 1 second
                System.Threading.Thread.Sleep(1000)
            Loop]]>
            	</code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.EmailValidation.TopLevelDomains">
            <summary>
            Domain Ending Regular Expression Mask (known ending such as .com, .net or a
            country code). This is also known as the Top Level Domain or Root Domain.
            //From http://en.wikipedia.org/wiki/List_of_Internet_top-level_domains
            //AND https://www.icann.org/resources/pages/tlds-2012-02-25-en
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.EmailValidation.BlackList">
            <summary>
            A List of emails, domains, or words to black list
            </summary>
            <example>
            	<code lang="CS" title="Black List CSharp">
            		<![CDATA[
            EmailValidation emailValidator = new EmailValidation(); //Trial Mode
            //EmailValidation emailValidator = new EmailValidation("place user name here", "place license key here"); //License Mode
                 
            emailValidator.FromEmail = "someone@somewhere.com";
            emailValidator.FromMailServer = "mail.somewhere.com";
             
            //Black list hotmail.com domain
            emailValidator.BlackList.Add("hotmail.com", CompareMethod.DomainName);
             
            //Validate a single email that will be black listed
            Result myResult = emailValidator.ValidEmail("john.smith@hotmail.com");
             
            //Print the results to the console
            Console.WriteLine(myResult.UserMessage);
            Console.WriteLine();
            Console.WriteLine(myResult.StatusDescription);
            Console.WriteLine();
            Console.WriteLine(myResult.Log);]]>
            	</code>
            	<code lang="VB" title="Black List VB.NET">
            		<![CDATA[
            Dim emailValidator As EmailValidation = New EmailValidation() 'Trial Mode
            'Dim emailValidator As EmailValidation = New EmailValidation("place user name here", "place license key here") 'License Mode
             
            emailValidator.FromEmail = "someone@somewhere.com"
            emailValidator.FromMailServer = "mail.somewhere.com"
             
            'Black list hotmail.com domain
            emailValidator.BlackList.Add("hotmail.com", CompareMethod.DomainName)
             
            'Validate a single email that will be black listed
            Dim myResult As Result = emailValidator.ValidEmail("john.smith@hotmail.com")
             
            'Print the results to the console
            Console.WriteLine(myResult.UserMessage)
            Console.WriteLine()
            Console.WriteLine(myResult.StatusDescription)
            Console.WriteLine()
            Console.WriteLine(myResult.Log)]]>
            	</code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.EmailValidation.WhiteList">
            <summary>
            A list of emails, domains, or words to white list
            </summary>
            <example>
            	<code lang="CS" title="White List CSharp">
            		<![CDATA[
            EmailValidation emailValidator = new EmailValidation(); //Trial Mode
            //EmailValidation emailValidator = new EmailValidation("place user name here", "place license key here"); //License Mode
                 
            emailValidator.FromEmail = "someone@somewhere.com";
            emailValidator.FromMailServer = "mail.somewhere.com";
             
            emailValidator.WhiteList.Add("hotmail.com", CompareMethod.DomainName);
             
            //This fake email will be valid since the domain is white listed
            Result myResult = emailValidator.ValidEmail("asdf@hotmail.com");
             
            //Print the results to the console
            Console.WriteLine(myResult.UserMessage);
            Console.WriteLine();
            Console.WriteLine(myResult.StatusDescription);
            Console.WriteLine();
            Console.WriteLine(myResult.Log);]]>
            	</code>
            	<code lang="VB" title="White List VB.NET">
            		<![CDATA[
            Dim emailValidator As EmailValidation = New EmailValidation() 'Trial Mode
            'Dim emailValidator As EmailValidation = New EmailValidation("place user name here", "place license key here") 'License Mode
             
            emailValidator.FromEmail = "someone@somewhere.com"
            emailValidator.FromMailServer = "mail.somewhere.com"
             
            emailValidator.WhiteList.Add("hotmail.com", CompareMethod.DomainName)
             
            'This fake email will be valid since the domain is white listed
            Dim myResult As Result = emailValidator.ValidEmail("asdf@hotmail.com")
             
            'Print the results to the console
            Console.WriteLine(myResult.UserMessage)
            Console.WriteLine()
            Console.WriteLine(myResult.StatusDescription)
            Console.WriteLine()
            Console.WriteLine(myResult.Log)]]>
            	</code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.EmailValidation.QueueCount">
            <summary>
            The count of the items queued in the thread pool
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.EmailValidation.Complete">
            <summary>
            Used to reset progress counters
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.EmailValidation.InitNeeded">
            <summary>
            If true general initialization is needed
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.#ctor">
            <summary>Instantiates Email Validation in trial mode.</summary>
            <example>
            	<code lang="CS" title="Email Validation Contructor Trial CSharp">
            EmailValidation emailValidator = new EmailValidation(); //Trial Mode
            </code>
            	<code lang="VB" title="Email Validation Constructor Trial VB.NET">
            Dim emailValidator As EmailValidation = New EmailValidation() 'Trial Mode
            </code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.#ctor(System.String,System.String)">
            <summary>Instantiates Email Validation in Licensed Mode.</summary>
            <example>
            	<code lang="CS" title="Email Validation Constructor License CSharp">
            		<![CDATA[
            EmailValidation emailValidator = new EmailValidation("place user name here", "place license key here"); //License Mode]]>
            	</code>
            	<code lang="VB" title="Email Validation Constructor License VB.NET">
            		<![CDATA[
            Dim emailValidator As EmailValidation = New EmailValidation("place user name here", "place license key here") 'License Mode]]>
            	</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.#ctor(System.String)">
            <summary>
            Extend the trial of the Software
            </summary>
            <param name="trialExtensionCode"></param>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.CheckLicense(System.String,System.String)">
            <summary>
            The variables below are specific to the licensing component
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.ValidEmail(System.String)">
            <summary>
            Validate an email using the DefaultOptions (see the DefaultOptions property)
            </summary>
            <example>
            	<code title="Valid Email 1 CSharp" description="" lang="CS">
            EmailValidation emailValidator = new EmailValidation(); //Trial Mode
            //EmailValidation emailValidator = new EmailValidation("place user name here", "place license key here"); //License Mode
             
            emailValidator.FromEmail = "someone@somewhere.com";
            emailValidator.FromMailServer = "mail.somewhere.com";
             
            Result myResult = emailValidator.ValidEmail("johnsmith@hotmail.com");
             
            //Print the results to the console
            Console.WriteLine(myResult.UserMessage);
            Console.WriteLine();
            Console.WriteLine(myResult.StatusDescription);
            Console.WriteLine();
            Console.WriteLine(myResult.Log);</code>
            	<code title="Valid Email 1 VB.NET" description="" lang="VB">
            Dim emailValidator As EmailValidation = New EmailValidation() 'Trial Mode
            'Dim emailValidator As EmailValidation = New EmailValidation("place user name here", "place license key here") 'License Mode
             
            emailValidator.FromEmail = "someone@somewhere.com"
            emailValidator.FromMailServer = "mail.somewhere.com"
             
            Dim myResult As Result = emailValidator.ValidEmail("johnsmith@hotmail.com")
             
            'Print the results to the console
            Console.WriteLine(myResult.UserMessage)
            Console.WriteLine()
            Console.WriteLine(myResult.StatusDescription)
            Console.WriteLine()
            Console.WriteLine(myResult.Log)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.ValidEmail(System.String,System.String)">
            <summary>
            Validate an email and an associated contact id using the DefaultOptions (see the
            DefaultOptions property)
            </summary>
            <example>
            	<code title="Valid Email 2 CSharp" description="" lang="CS">
            EmailValidation emailValidator = new EmailValidation(); //Trial Mode
            //EmailValidation emailValidator = new EmailValidation("place user name here", "place license key here"); //License Mode
             
            emailValidator.FromEmail = "someone@somewhere.com";
            emailValidator.FromMailServer = "mail.somewhere.com";
             
            Result myResult= emailValidator.ValidEmail("1", "johnsmith@hotmail.com");
             
            //Print the results to the console
            Console.WriteLine(myResult.UserMessage);
            Console.WriteLine();
            Console.WriteLine(myResult.StatusDescription);
            Console.WriteLine();
            Console.WriteLine(myResult.Log);</code>
            	<code title="Valid Email 2 VB.NET" description="" lang="VB">
            Dim emailValidator As EmailValidation = New EmailValidation() 'Trial Mode
            'Dim emailValidator As EmailValidation = New EmailValidation("place user name here", "place license key here") 'License Mode
             
            emailValidator.FromEmail = "someone@somewhere.com"
            emailValidator.FromMailServer = "mail.somewhere.com"
             
            Dim myResult As Result= emailValidator.ValidEmail("1", "johnsmith@hotmail.com")
             
            'Print the results to the console
            Console.WriteLine(myResult.UserMessage)
            Console.WriteLine()
            Console.WriteLine(myResult.StatusDescription)
            Console.WriteLine()
            Console.WriteLine(myResult.Log)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.ValidEmail(System.String,System.Collections.Generic.List{KellermanSoftware.NetEmailValidation.ValidationOptions})">
            <summary>
            Validate an email address synchronously using the passed in options
            </summary>
            <example>
            	<code title="Valid Email 3 CSharp" description="" lang="CS">
            EmailValidation emailValidator = new EmailValidation(); //Trial Mode
            //EmailValidation emailValidator = new EmailValidation("place user name here", "place license key here"); //License Mode
             
            emailValidator.FromEmail = "someone@somewhere.com";
            emailValidator.FromMailServer = "mail.somewhere.com";
             
            List&lt;ValidationOptions&gt; options = emailValidator.BestConnectionOptions();
             
            Result myResult = emailValidator.ValidEmail("johnsmith@hotmail.com", options);
             
            //Print the results to the console
            Console.WriteLine(myResult.UserMessage);
            Console.WriteLine();
            Console.WriteLine(myResult.StatusDescription);
            Console.WriteLine();
            Console.WriteLine(myResult.Log);</code>
            	<code title="Valid Email 3 VB.NET" description="" lang="VB">
            Dim emailValidator As EmailValidation = New EmailValidation() 'Trial Mode
            'Dim emailValidator As EmailValidation = New EmailValidation("place user name here", "place license key here") 'License Mode
             
            emailValidator.FromEmail = "someone@somewhere.com"
            emailValidator.FromMailServer = "mail.somewhere.com"
             
            Dim options As List(Of ValidationOptions) = emailValidator.BestConnectionOptions()
             
            Dim myResult As Result = emailValidator.ValidEmail("johnsmith@hotmail.com", options)
             
            'Print the results to the console
            Console.WriteLine(myResult.UserMessage)
            Console.WriteLine()
            Console.WriteLine(myResult.StatusDescription)
            Console.WriteLine()
            Console.WriteLine(myResult.Log)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.ValidEmail(System.String,System.String,System.Collections.Generic.List{KellermanSoftware.NetEmailValidation.ValidationOptions})">
            <summary>
            Validate an email address synchronously using the passed in options
            </summary>
            <example>
            	<code title="Valid Email 4 CSharp" description="" lang="CS">
            EmailValidation emailValidator = new EmailValidation(); //Trial Mode
            //EmailValidation emailValidator = new EmailValidation("place user name here", "place license key here"); //License Mode
             
            emailValidator.FromEmail = "someone@somewhere.com";
            emailValidator.FromMailServer = "mail.somewhere.com";
             
            List&lt;ValidationOptions&gt; options = emailValidator.BestConnectionOptions();
             
            Result myResult = emailValidator.ValidEmail("1", "johnsmith@hotmail.com", options);
             
            //Print the results to the console
            Console.WriteLine(myResult.UserMessage);
            Console.WriteLine();
            Console.WriteLine(myResult.StatusDescription);
            Console.WriteLine();
            Console.WriteLine(myResult.Log);</code>
            	<code title="Valid Email 4 VB.NET" description="" lang="VB">
            Dim emailValidator As EmailValidation = New EmailValidation() 'Trial Mode
            'Dim emailValidator As EmailValidation = New EmailValidation("place user name here", "place license key here") 'License Mode
             
            emailValidator.FromEmail = "someone@somewhere.com"
            emailValidator.FromMailServer = "mail.somewhere.com"
             
            Dim options As List(Of ValidationOptions) = emailValidator.BestConnectionOptions()
             
            Dim myResult As Result = emailValidator.ValidEmail("1", "johnsmith@hotmail.com", options)
             
            'Print the results to the console
            Console.WriteLine(myResult.UserMessage)
            Console.WriteLine()
            Console.WriteLine(myResult.StatusDescription)
            Console.WriteLine()
            Console.WriteLine(myResult.Log)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.ValidateList(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{KellermanSoftware.NetEmailValidation.ValidationOptions})">
            <summary>
            Validate a list of emails synchronously with an associated contact id from your database
            </summary>
            <example>
            	<code lang="CS" title="Validate List 1 CSharp">
            		<![CDATA[
            EmailValidation emailValidator = new EmailValidation(); //Trial Mode
            //EmailValidation emailValidator = new EmailValidation("place user name here", "place license key here"); //License Mode
             
            emailValidator.FromEmail = "someone@somewhere.com";
            emailValidator.FromMailServer = "mail.somewhere.com";
             
            //Create a list of 100 email addresses with an id
            Dictionary<string, string> emailAddresses = new Dictionary<string, string>();
             
            for (int i = 1; i <= 100; i++)
                emailAddresses.Add(i.ToString(), string.Format("johnsmith{0}@hotmail.com", i));
             
            //Best connection options
            List<ValidationOptions> options = emailValidator.BestConnectionOptions();
             
            //Validate a list synchronously
            List<Result> results= emailValidator.ValidateList(emailAddresses, options);
             
            //Print out the log
            foreach (Result myResult in results)
            {
                Console.WriteLine(myResult.Log);
            }]]>
            	</code>
            	<code lang="VB" title="Validate List 1 VB.NET">
            		<![CDATA[
            Dim emailValidator As EmailValidation = New EmailValidation() 'Trial Mode
            'Dim emailValidator As EmailValidation = New EmailValidation("place user name here", "place license key here") 'License Mode
             
            emailValidator.FromEmail = "someone@somewhere.com"
            emailValidator.FromMailServer = "mail.somewhere.com"
             
            'Create a list of 100 email addresses with an id
            Dim emailAddresses As Dictionary(Of String, String) = New Dictionary(Of String, String)()
             
            For i As Integer = 1 To 100
                emailAddresses.Add(i.ToString(), String.Format("johnsmith{0}@hotmail.com", i))
            Next i
             
            'Best connection options
            Dim options As List(Of ValidationOptions) = emailValidator.BestConnectionOptions()
             
            'Validate a list synchronously
            Dim results As List(Of Result)= emailValidator.ValidateList(emailAddresses, options)
             
            'Print out the log
            For Each myResult As Result In results
                Console.WriteLine(myResult.Log)
            Next myResult]]>
            	</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.ValidateList(System.Collections.Generic.List{System.String},System.Collections.Generic.List{KellermanSoftware.NetEmailValidation.ValidationOptions})">
            <summary>
            Validate a list of emails synchronously using the passed in options
            </summary>
            <example>
            	<code lang="CS" title="Validate List 2 CSharp">
            		<![CDATA[
            EmailValidation emailValidator = new EmailValidation(); //Trial Mode
            //EmailValidation emailValidator = new EmailValidation("place user name here", "place license key here"); //License Mode
             
            emailValidator.FromEmail = "someone@somewhere.com";
            emailValidator.FromMailServer = "mail.somewhere.com";
             
            //Create a list of 100 email addresses 
            List<string> emailAddresses = new List<string>();
             
            for (int i = 1; i <= 100; i++)
                emailAddresses.Add(string.Format("johnsmith{0}@hotmail.com", i));
             
            List<ValidationOptions> options = emailValidator.BestConnectionOptions();
             
            //Validate synchronously
            List<Result> results = emailValidator.ValidateList(emailAddresses, options);
             
            //Print the log
            foreach (Result myResult in results)
            {
                Console.WriteLine(myResult.Log);
            }]]>
            	</code>
            	<code lang="VB" title="Validate List 2 VB.NET">
            		<![CDATA[
            Dim emailValidator As EmailValidation = New EmailValidation() 'Trial Mode
            'Dim emailValidator As EmailValidation = New EmailValidation("place user name here", "place license key here") 'License Mode
             
            emailValidator.FromEmail = "someone@somewhere.com"
            emailValidator.FromMailServer = "mail.somewhere.com"
             
            'Create a list of 100 email addresses 
            Dim emailAddresses As List(Of String) = New List(Of String)()
             
            For i As Integer = 1 To 100
                emailAddresses.Add(String.Format("johnsmith{0}@hotmail.com", i))
            Next i
             
            Dim options As List(Of ValidationOptions) = emailValidator.BestConnectionOptions()
             
            'Validate synchronously
            Dim results As List(Of Result) = emailValidator.ValidateList(emailAddresses, options)
             
            'Print the log
            For Each myResult As Result In results
                Console.WriteLine(myResult.Log)
            Next myResult]]>
            	</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.ValidateList(System.Collections.Generic.List{System.String})">
            <summary>
            Validate a list of emails synchronously using default options
            </summary>
            <example>
            	<code lang="CS" title="Validate List 3 CSharp">
            		<![CDATA[
            EmailValidation emailValidator = new EmailValidation(); //Trial Mode
            //EmailValidation emailValidator = new EmailValidation("place user name here", "place license key here"); //License Mode
             
            emailValidator.FromEmail = "someone@somewhere.com";
            emailValidator.FromMailServer = "mail.somewhere.com";
             
            //Create a list of 100 email addresses 
            List<string> emailAddresses = new List<string>();
             
            for (int i = 1; i <= 100; i++)
                emailAddresses.Add(string.Format("johnsmith{0}@hotmail.com", i));
             
            //Validate the list synchronously
            List<Result> results = emailValidator.ValidateList(emailAddresses);
             
            //Print the log
            foreach (Result myResult in results)
            {
                Console.WriteLine(myResult.Log);
            }]]>
            	</code>
            	<code lang="VB" title="Validate List 3 VB.NET">
            		<![CDATA[
            Dim emailValidator As EmailValidation = New EmailValidation() 'Trial Mode
            'Dim emailValidator As EmailValidation = New EmailValidation("place user name here", "place license key here") 'License Mode
             
            emailValidator.FromEmail = "someone@somewhere.com"
            emailValidator.FromMailServer = "mail.somewhere.com"
             
            'Create a list of 100 email addresses 
            Dim emailAddresses As List(Of String) = New List(Of String)()
             
            For i As Integer = 1 To 100
                emailAddresses.Add(String.Format("johnsmith{0}@hotmail.com", i))
            Next i
             
            'Validate the list synchronously
            Dim results As List(Of Result) = emailValidator.ValidateList(emailAddresses)
             
            'Print the log
            For Each myResult As Result In results
                Console.WriteLine(myResult.Log)
            Next myResult]]>
            	</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.ValidateListAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Validate a list of emails asynchronously using default options
            </summary>
            <example>
            	<code lang="CS" title="Validate List Async 3 CSharp">
            		<![CDATA[
            public void Example()
            {
                EmailValidation emailValidator = new EmailValidation(); //Trial Mode
                //EmailValidation emailValidator = new EmailValidation("place user name here", "place license key here"); //License Mode
             
                emailValidator.FromEmail = "someone@somewhere.com";
                emailValidator.FromMailServer = "mail.somewhere.com";
             
                //Create a list of 100 email addresses
                List<string> emailAddresses = new List<string>();
             
                for (int i = 1; i <= 100; i++)
                    emailAddresses.Add(string.Format("johnsmith{0}@hotmail.com", i));
             
                //Attach Events                
                emailValidator.ProgressEvent += new EmailValidation.ProgressChangedEventHandler(ProgressEvent);
                emailValidator.ValidationCompleteEvent += new AsyncCompletedEventHandler(CompletionEvent);
                emailValidator.ResponseReceivedEvent += new EmailValidation.ResponseReceivedEventHandler(ResponseReceivedEvent);
             
                //Begin asynchronous validation
                emailValidator.ValidateListAsync(emailAddresses);
             
                while (emailValidator.IsBusy)
                {
                    //Sleep 1 second
                    System.Threading.Thread.Sleep(1000);
                }
             
                //Remove the event connections
                emailValidator.ProgressEvent -= new EmailValidation.ProgressChangedEventHandler(ProgressEvent);
                emailValidator.ValidationCompleteEvent -= new AsyncCompletedEventHandler(CompletionEvent);
                emailValidator.ResponseReceivedEvent -= new EmailValidation.ResponseReceivedEventHandler(ResponseReceivedEvent);   
            }
             
             
            public void CompletionEvent(object sender, AsyncCompletedEventArgs e)
            {
                Console.WriteLine("Finished. Validated emails");
            }
             
            public void ProgressEvent(object sender, ProgressEventArgs args)
            {
                Console.WriteLine(string.Format("{0}% ({1} of {2}", args.ProgressPercentage, args.EmailsProcessed, args.TotalEmailsToProcess));
            }
             
            public void ResponseReceivedEvent(object sender, Result result)
            {
                if (result.IsValid)
                {
                    //Do something
                }
                else
                {
                    //Do something else
                }
             
                Console.WriteLine(result.Log);
            }]]>
            	</code>
            	<code lang="VB" title="Validate List Async 3 VB.NET">
            		<![CDATA[
            Public Sub Example()
                Dim emailValidator As EmailValidation = New EmailValidation() 'Trial Mode
                'Dim emailValidator As EmailValidation = New EmailValidation("place user name here", "place license key here") 'License Mode
             
                emailValidator.FromEmail = "someone@somewhere.com"
                emailValidator.FromMailServer = "mail.somewhere.com"
             
                'Create a list of 100 email addresses
                Dim emailAddresses As List(Of String) = New List(Of String)()
             
                For i As Integer = 1 To 100
                    emailAddresses.Add(String.Format("johnsmith{0}@hotmail.com", i))
                Next i
             
                'Attach Events                
                AddHandler emailValidator.ProgressEvent, AddressOf ProgressEvent
                AddHandler emailValidator.ValidationCompleteEvent, AddressOf CompletionEvent
                AddHandler emailValidator.ResponseReceivedEvent, AddressOf ResponseReceivedEvent
             
                'Begin asynchronous validation
                emailValidator.ValidateListAsync(emailAddresses)
             
                Do While emailValidator.IsBusy
                    'Sleep 1 second
                    System.Threading.Thread.Sleep(1000)
                Loop
             
                'Remove the event connections
                RemoveHandler emailValidator.ProgressEvent, AddressOf ProgressEvent
                RemoveHandler emailValidator.ValidationCompleteEvent, AddressOf CompletionEvent
                RemoveHandler emailValidator.ResponseReceivedEvent, AddressOf ResponseReceivedEvent
                
            End Sub
                
             
            Public Sub CompletionEvent(ByVal sender As Object, ByVal e As AsyncCompletedEventArgs)
                Console.WriteLine("Finished. Validated emails")
            End Sub
             
            Public Sub ProgressEvent(ByVal sender As Object, ByVal args As ProgressEventArgs)
                Console.WriteLine(String.Format("{0}% ({1} of {2}", args.ProgressPercentage, args.EmailsProcessed, args.TotalEmailsToProcess))
            End Sub
             
            Public Sub ResponseReceivedEvent(ByVal sender As Object, ByVal result As Result)
                If result.IsValid Then
                    'Do something
                Else
                    'Do something else
                End If
             
                Console.WriteLine(result.Log)
            End Sub]]>
            	</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.ValidateListAsync(System.Collections.Generic.List{System.String},System.Collections.Generic.List{KellermanSoftware.NetEmailValidation.ValidationOptions})">
            <summary>
            Validate a list of emails asynchronously using the passed in options
            </summary>
            <example>
            	<code lang="CS" title="Validate List Async 2 CSharp">
            		<![CDATA[
            public void Example()
            {
                EmailValidation emailValidator = new EmailValidation(); //Trial Mode
                //EmailValidation emailValidator = new EmailValidation("place user name here", "place license key here"); //License Mode
             
                emailValidator.FromEmail = "someone@somewhere.com";
                emailValidator.FromMailServer = "mail.somewhere.com";
                 
                //Create a list of 100 email addresses
                List<string> emailAddresses = new List<string>();
                 
                for (int i = 1; i <= 100; i++)
                    emailAddresses.Add(string.Format("johnsmith{0}@hotmail.com", i));
                 
                //Get the best connection options
                List<ValidationOptions> options = emailValidator.BestConnectionOptions();
                 
                //Attach Events                
                emailValidator.ProgressEvent += new EmailValidation.ProgressChangedEventHandler(ProgressEvent);
                emailValidator.ValidationCompleteEvent += new AsyncCompletedEventHandler(CompletionEvent);
                emailValidator.ResponseReceivedEvent += new EmailValidation.ResponseReceivedEventHandler(ResponseReceivedEvent);
                 
                //Begin asynchronous validation
                emailValidator.ValidateListAsync(emailAddresses,options);
                 
                while (emailValidator.IsBusy)
                {
                    //Sleep 1 second
                    System.Threading.Thread.Sleep(1000);
                }
                 
                //Remove the event connections
                emailValidator.ProgressEvent -= new EmailValidation.ProgressChangedEventHandler(ProgressEvent);
                emailValidator.ValidationCompleteEvent -= new AsyncCompletedEventHandler(CompletionEvent);
                emailValidator.ResponseReceivedEvent -= new EmailValidation.ResponseReceivedEventHandler(ResponseReceivedEvent);
            }
             
             
            public void CompletionEvent(object sender, AsyncCompletedEventArgs e)
            {
                Console.WriteLine("Finished. Validated emails");
            }
             
            public void ProgressEvent(object sender, ProgressEventArgs args)
            {
                Console.WriteLine(string.Format("{0}% ({1} of {2}", args.ProgressPercentage, args.EmailsProcessed, args.TotalEmailsToProcess));
            }
             
            public void ResponseReceivedEvent(object sender, Result result)
            {
                if (result.IsValid)
                {
                    //Do something
                }
                else
                {
                    //Do something else
                }
             
                Console.WriteLine(result.Log);
            }]]>
            	</code>
            	<code lang="VB" title="Validate List Async 2 VB.NET">
            		<![CDATA[
            Public Sub Example()
                Dim emailValidator As EmailValidation = New EmailValidation() 'Trial Mode
                'Dim emailValidator As EmailValidation = New EmailValidation("place user name here", "place license key here") 'License Mode
             
                emailValidator.FromEmail = "someone@somewhere.com"
                emailValidator.FromMailServer = "mail.somewhere.com"
                 
                'Create a list of 100 email addresses
                Dim emailAddresses As List(Of String) = New List(Of String)()
                 
                For i As Integer = 1 To 100
                    emailAddresses.Add(String.Format("johnsmith{0}@hotmail.com", i))
                Next i
                 
                'Get the best connection options
                Dim options As List(Of ValidationOptions) = emailValidator.BestConnectionOptions()
                 
                'Attach Events                
                AddHandler emailValidator.ProgressEvent, AddressOf ProgressEvent
                AddHandler emailValidator.ValidationCompleteEvent, AddressOf CompletionEvent
                AddHandler emailValidator.ResponseReceivedEvent, AddressOf ResponseReceivedEvent
                 
                'Begin asynchronous validation
                emailValidator.ValidateListAsync(emailAddresses,options)
                 
                Do While emailValidator.IsBusy
                    'Sleep 1 second
                    System.Threading.Thread.Sleep(1000)
                Loop
                 
                'Remove the event connections
                RemoveHandler emailValidator.ProgressEvent, AddressOf ProgressEvent
                RemoveHandler emailValidator.ValidationCompleteEvent, AddressOf CompletionEvent
                RemoveHandler emailValidator.ResponseReceivedEvent, AddressOf ResponseReceivedEvent
            End Sub
                
             
            Public Sub CompletionEvent(ByVal sender As Object, ByVal e As AsyncCompletedEventArgs)
                Console.WriteLine("Finished. Validated emails")
            End Sub
             
            Public Sub ProgressEvent(ByVal sender As Object, ByVal args As ProgressEventArgs)
                Console.WriteLine(String.Format("{0}% ({1} of {2}", args.ProgressPercentage, args.EmailsProcessed, args.TotalEmailsToProcess))
            End Sub
             
            Public Sub ResponseReceivedEvent(ByVal sender As Object, ByVal result As Result)
                If result.IsValid Then
                    'Do something
                Else
                    'Do something else
                End If
             
                Console.WriteLine(result.Log)
            End Sub]]>
            	</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.ValidateListAsync(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{KellermanSoftware.NetEmailValidation.ValidationOptions})">
            <summary>
            Validate a list of emails asynchronously with an associated contact id from your database
            </summary>
            <example>
            	<code lang="CS" title="Validate List Async 1 CSharp">
            		<![CDATA[
            public void Example()
            {
                EmailValidation emailValidator = new EmailValidation(); //Trial Mode
                //EmailValidation emailValidator = new EmailValidation("place user name here", "place license key here"); //License Mode
             
                emailValidator.FromEmail = "someone@somewhere.com";
                emailValidator.FromMailServer = "mail.somewhere.com";
                 
                //Create a list of 100 email addresses with an id
                Dictionary<string, string> emailAddresses = new Dictionary<string, string>();
                 
                for (int i = 1; i <= 100; i++)
                    emailAddresses.Add(i.ToString(),string.Format("johnsmith{0}@hotmail.com", i));
                 
                List<ValidationOptions> options = emailValidator.BestConnectionOptions();
                 
                //Attach Events                
                emailValidator.ProgressEvent += new EmailValidation.ProgressChangedEventHandler(ProgressEvent);
                emailValidator.ValidationCompleteEvent += new AsyncCompletedEventHandler(CompletionEvent);
                emailValidator.ResponseReceivedEvent += new EmailValidation.ResponseReceivedEventHandler(ResponseReceivedEvent);
                 
                //Begin asynchronous validation
                emailValidator.ValidateListAsync(emailAddresses, options);
                 
                while (emailValidator.IsBusy)
                {
                    //Sleep 1 second
                    System.Threading.Thread.Sleep(1000);
                }
                 
                //Remove the event connections
                emailValidator.ProgressEvent -= new EmailValidation.ProgressChangedEventHandler(ProgressEvent);
                emailValidator.ValidationCompleteEvent -= new AsyncCompletedEventHandler(CompletionEvent);
                emailValidator.ResponseReceivedEvent -= new EmailValidation.ResponseReceivedEventHandler(ResponseReceivedEvent);
            }
             
             
            public void CompletionEvent(object sender, AsyncCompletedEventArgs e)
            {
                Console.WriteLine("Finished. Validated emails");
            }
             
            public void ProgressEvent(object sender, ProgressEventArgs args)
            {
                Console.WriteLine(string.Format("{0}% ({1} of {2}", args.ProgressPercentage, args.EmailsProcessed, args.TotalEmailsToProcess));
            }
             
            public void ResponseReceivedEvent(object sender, Result result)
            {
                if (result.IsValid)
                {
                    //Do something
                }
                else
                {
                    //Do something else
                }
             
                Console.WriteLine(result.Log);
            }]]>
            	</code>
            	<code lang="VB" title="Validate List Async 1 VB.NET">
            		<![CDATA[
            Public Sub Example()
                Dim emailValidator As EmailValidation = New EmailValidation() 'Trial Mode
                'Dim emailValidator As EmailValidation = New EmailValidation("place user name here", "place license key here") 'License Mode
             
                emailValidator.FromEmail = "someone@somewhere.com"
                emailValidator.FromMailServer = "mail.somewhere.com"
                 
                'Create a list of 100 email addresses with an id
                Dim emailAddresses As Dictionary(Of String, String) = New Dictionary(Of String, String)()
                 
                For i As Integer = 1 To 100
                    emailAddresses.Add(i.ToString(),String.Format("johnsmith{0}@hotmail.com", i))
                Next i
                 
                Dim options As List(Of ValidationOptions) = emailValidator.BestConnectionOptions()
                 
                'Attach Events                
                AddHandler emailValidator.ProgressEvent, AddressOf ProgressEvent
                AddHandler emailValidator.ValidationCompleteEvent, AddressOf CompletionEvent
                AddHandler emailValidator.ResponseReceivedEvent, AddressOf ResponseReceivedEvent
                 
                'Begin asynchronous validation
                emailValidator.ValidateListAsync(emailAddresses, options)
                 
                Do While emailValidator.IsBusy
                    'Sleep 1 second
                    System.Threading.Thread.Sleep(1000)
                Loop
                 
                'Remove the event connections
                RemoveHandler emailValidator.ProgressEvent, AddressOf ProgressEvent
                RemoveHandler emailValidator.ValidationCompleteEvent, AddressOf CompletionEvent
                RemoveHandler emailValidator.ResponseReceivedEvent, AddressOf ResponseReceivedEvent
            End Sub
                
             
            Public Sub CompletionEvent(ByVal sender As Object, ByVal e As AsyncCompletedEventArgs)
                Console.WriteLine("Finished. Validated emails")
            End Sub
             
            Public Sub ProgressEvent(ByVal sender As Object, ByVal args As ProgressEventArgs)
                Console.WriteLine(String.Format("{0}% ({1} of {2}", args.ProgressPercentage, args.EmailsProcessed, args.TotalEmailsToProcess))
            End Sub
             
            Public Sub ResponseReceivedEvent(ByVal sender As Object, ByVal result As Result)
                If result.IsValid Then
                    'Do something
                Else
                    'Do something else
                End If
             
                Console.WriteLine(result.Log)
            End Sub]]>
            	</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.ValidEmailAsync(System.String)">
            <summary>
            Validate an email asynchronously using the default options
            </summary>
            <example>
            	<code title="Valid Email Async 1 CSharp" description="" lang="CS">
            public void Example()
            {
                EmailValidation emailValidator = new EmailValidation(); //Trial Mode
                //EmailValidation emailValidator = new EmailValidation("place user name here", "place license key here"); //License Mode
             
                emailValidator.FromEmail = "someone@somewhere.com";
                emailValidator.FromMailServer = "mail.somewhere.com";
             
                //Attach Events                
                emailValidator.ResponseReceivedEvent += new EmailValidation.ResponseReceivedEventHandler(ResponseReceivedEvent);
             
                emailValidator.ValidEmailAsync("johnsmith@hotmail.com");
             
                //Wait until finished
                while (emailValidator.IsBusy)
                {
                    System.Threading.Thread.Sleep(100);
                }
             
                //Remove the event connections
                emailValidator.ResponseReceivedEvent -= new EmailValidation.ResponseReceivedEventHandler(ResponseReceivedEvent);
            }
             
            public void ResponseReceivedEvent(object sender, Result result)
            {
                if (result.IsValid)
                {
                    //Do something
                }
                else
                {
                    //Do something else
                }
             
                Console.WriteLine(result.Log);
            }</code>
            	<code title="Valid Email Async 1 VB.NET" description="" lang="VB">
            Public Sub Example()
                Dim emailValidator As EmailValidation = New EmailValidation() 'Trial Mode
                'Dim emailValidator As EmailValidation = New EmailValidation("place user name here", "place license key here") 'License Mode
                
                emailValidator.FromEmail = "someone@somewhere.com"
                emailValidator.FromMailServer = "mail.somewhere.com"
             
                'Attach Events                
                AddHandler emailValidator.ResponseReceivedEvent, AddressOf ResponseReceivedEvent
                
                emailValidator.ValidEmailAsync("johnsmith@hotmail.com")
                
                'Wait until finished
                Do While emailValidator.IsBusy
                    System.Threading.Thread.Sleep(100)
                Loop
                
                'Remove the event connections
                RemoveHandler emailValidator.ResponseReceivedEvent, AddressOf ResponseReceivedEvent        
            End Sub
                
            Public Sub ResponseReceivedEvent(ByVal sender As Object, ByVal result As Result)
                If result.IsValid Then
                    'Do something
                Else
                    'Do something else
                End If
             
                Console.WriteLine(result.Log)
            End Sub</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.ValidEmailAsync(System.String,System.String)">
            <summary>
            Validate an email asynchronously using the default options
            </summary>
            <example>
            	<code title="Valid Email Async 2 CSharp" description="" lang="CS">
            public void Example()
            {
                EmailValidation emailValidator = new EmailValidation(); //Trial Mode
                //EmailValidation emailValidator = new EmailValidation("place user name here", "place license key here"); //License Mode
             
                emailValidator.FromEmail = "someone@somewhere.com";
                emailValidator.FromMailServer = "mail.somewhere.com";
             
                //Attach Events                
                emailValidator.ResponseReceivedEvent += new EmailValidation.ResponseReceivedEventHandler(ResponseReceivedEvent);
             
                emailValidator.ValidEmailAsync("1", "johnsmith@hotmail.com");
             
                //Wait until finished
                while (emailValidator.IsBusy)
                {
                    System.Threading.Thread.Sleep(100);
                }
             
                //Remove the event connections
                emailValidator.ResponseReceivedEvent -= new EmailValidation.ResponseReceivedEventHandler(ResponseReceivedEvent);   
            }
             
            public void ResponseReceivedEvent(object sender, Result result)
            {
                if (result.IsValid)
                {
                    //Do something
                }
                else
                {
                    //Do something else
                }
             
                Console.WriteLine(result.Log);
            }</code>
            	<code title="Valid Email Async 2 VB.NET" description="" lang="VB">
            Public Sub Example()
                Dim emailValidator As EmailValidation = New EmailValidation() 'Trial Mode
                'Dim emailValidator As EmailValidation = New EmailValidation("place user name here", "place license key here") 'License Mode
             
                emailValidator.FromEmail = "someone@somewhere.com"
                emailValidator.FromMailServer = "mail.somewhere.com"
             
                'Attach Events                
                AddHandler emailValidator.ResponseReceivedEvent, AddressOf ResponseReceivedEvent
             
                emailValidator.ValidEmailAsync("1", "johnsmith@hotmail.com")
             
                'Wait until finished
                Do While emailValidator.IsBusy
                    System.Threading.Thread.Sleep(100)
                Loop
             
                'Remove the event connections
                RemoveHandler emailValidator.ResponseReceivedEvent, AddressOf ResponseReceivedEvent
                    
            End Sub
                
            Public Sub ResponseReceivedEvent(ByVal sender As Object, ByVal result As Result)
                If result.IsValid Then
                    'Do something
                Else
                    'Do something else
                End If
             
                Console.WriteLine(result.Log)
            End Sub</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.ValidEmailAsync(System.String,System.String,System.Collections.Generic.List{KellermanSoftware.NetEmailValidation.ValidationOptions})">
            <summary>
            Validate a single email address asynchronously using the passed options
            </summary>
            <example>
            	<code lang="CS" title="Valid Email Async 3 CSharp">
            		<![CDATA[
            public void Example
            {
                EmailValidation emailValidator = new EmailValidation(); //Trial Mode
                //EmailValidation emailValidator = new EmailValidation("place user name here", "place license key here"); //License Mode
             
                emailValidator.FromEmail = "someone@somewhere.com";
                emailValidator.FromMailServer = "mail.somewhere.com";
             
                List<ValidationOptions> options = emailValidator.BestConnectionOptions();
             
                //Attach Events                
                emailValidator.ResponseReceivedEvent += new EmailValidation.ResponseReceivedEventHandler(ResponseReceivedEvent);
             
                emailValidator.ValidEmailAsync("1", "johnsmith@hotmail.com", options);
             
                //Wait until finished
                while (emailValidator.IsBusy)
                {
                    System.Threading.Thread.Sleep(100);
                }
             
                //Remove the event connections
                emailValidator.ResponseReceivedEvent -= new EmailValidation.ResponseReceivedEventHandler(ResponseReceivedEvent);
            }
             
            public void ResponseReceivedEvent(object sender, Result result)
            {
                if (result.IsValid)
                {
                    //Do something
                }
                else
                {
                    //Do something else
                }
             
                Console.WriteLine(result.Log);
            }]]>
            	</code>
            	<code lang="VB" title="Valid Email Async 3 VB.NET">
            		<![CDATA[
            Public Sub Example()
                Dim emailValidator As EmailValidation = New EmailValidation() 'Trial Mode
                'Dim emailValidator As EmailValidation = New EmailValidation("place user name here", "place license key here") 'License Mode
             
                emailValidator.FromEmail = "someone@somewhere.com"
                emailValidator.FromMailServer = "mail.somewhere.com"
             
                Dim options As List(Of ValidationOptions) = emailValidator.BestConnectionOptions()
             
                'Attach Events                
                AddHandler emailValidator.ResponseReceivedEvent, AddressOf ResponseReceivedEvent
             
                emailValidator.ValidEmailAsync("1", "johnsmith@hotmail.com", options)
             
                'Wait until finished
                Do While emailValidator.IsBusy
                    System.Threading.Thread.Sleep(100)
                Loop
             
                'Remove the event connections
                RemoveHandler emailValidator.ResponseReceivedEvent, AddressOf ResponseReceivedEvent
            End Sub
             
            Public Sub ResponseReceivedEvent(ByVal sender As Object, ByVal result As Result)
                If result.IsValid Then
                    'Do something
                Else
                    'Do something else
                End If
             
                Console.WriteLine(result.Log)
            End Sub]]>
            	</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.BestConnectionOptions">
            <summary>
            Returns a list of the default options excluding options that cannot be performed.
            The SMTP Port (normally 25) must be open to do a SMTP connect or mailbox check. Must be connected to the
            internet to do an MxRecord lookup. This effectively performs the greatest possible
            validation depending on the local machines connection capabilities.
            </summary>
            <example>
            	<code lang="CS" title="Best Connection Options CSharp">
            		<![CDATA[
            EmailValidation emailValidator = new EmailValidation(); //Trial Mode
            //EmailValidation emailValidator = new EmailValidation("place user name here", "place license key here"); //License Mode
             
            emailValidator.FromEmail = "someone@somewhere.com";
            emailValidator.FromMailServer = "mail.somewhere.com";
             
            //Connect using the best available options
            List<ValidationOptions> options = emailValidator.BestConnectionOptions();
            Console.WriteLine(emailValidator.BestConnectionMessage);
             
            //Validate a single email with the best available options
            Result myResult = emailValidator.ValidEmail("john.smith@hotmail.com", options);
             
            //Print the results to the console
            Console.WriteLine(myResult.UserMessage);
            Console.WriteLine();
            Console.WriteLine(myResult.StatusDescription);
            Console.WriteLine();
            Console.WriteLine(myResult.Log);]]>
            	</code>
            	<code lang="VB" title="Best Connection Options VB.NET">
            		<![CDATA[
            Dim emailValidator As EmailValidation = New EmailValidation() 'Trial Mode
            'Dim emailValidator As EmailValidation = New EmailValidation("place user name here", "place license key here") 'License Mode
             
            emailValidator.FromEmail = "someone@somewhere.com"
            emailValidator.FromMailServer = "mail.somewhere.com"
             
            'Connect using the best available options
            Dim options As List(Of ValidationOptions) = emailValidator.BestConnectionOptions()
            Console.WriteLine(emailValidator.BestConnectionMessage)
             
            'Validate a single email with the best available options
            Dim myResult As Result = emailValidator.ValidEmail("john.smith@hotmail.com", options)
             
            'Print the results to the console
            Console.WriteLine(myResult.UserMessage)
            Console.WriteLine()
            Console.WriteLine(myResult.StatusDescription)
            Console.WriteLine()
            Console.WriteLine(myResult.Log)]]>
            	</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.EnableLogging">
            <summary>
            Log to the console
            </summary>
            <example>
            	<code lang="CS" title="Enable Logging Console CSharp">
            		<![CDATA[
            EmailValidation emailValidator = new EmailValidation(); //Trial Mode
            //EmailValidation emailValidator = new EmailValidation("place user name here", "place license key here"); //License Mode
             
            emailValidator.FromEmail = "someone@somewhere.com";
            emailValidator.FromMailServer = "mail.somewhere.com";
             
            //Log to the console
            emailValidator.EnableLogging();
             
            //Connect using the best available options
            List<ValidationOptions> options = emailValidator.BestConnectionOptions();
            Console.WriteLine(emailValidator.BestConnectionMessage);
             
            //Validate a single email with the best available options
            Result myResult = emailValidator.ValidEmail("john.smith@hotmail.com", options);]]>
            	</code>
            	<code lang="VB" title="Enable Logging Console VB.NET">
            		<![CDATA[
            Dim emailValidator As EmailValidation = New EmailValidation() 'Trial Mode
            'Dim emailValidator As EmailValidation = New EmailValidation("place user name here", "place license key here") 'License Mode
             
            emailValidator.FromEmail = "someone@somewhere.com"
            emailValidator.FromMailServer = "mail.somewhere.com"
             
            'Log to the console
            emailValidator.EnableLogging()
             
            'Connect using the best available options
            Dim options As List(Of ValidationOptions) = emailValidator.BestConnectionOptions()
            Console.WriteLine(emailValidator.BestConnectionMessage)
             
            'Validate a single email with the best available options
            Dim myResult As Result = emailValidator.ValidEmail("john.smith@hotmail.com", options)]]>
            	</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.EnableLogging(System.String)">
            <summary>
            Log to a file
            </summary>
            <example>
            	<code lang="CS" title="Enable Logging File CSharp">
            		<![CDATA[
            EmailValidation emailValidator = new EmailValidation(); //Trial Mode
            //EmailValidation emailValidator = new EmailValidation("place user name here", "place license key here"); //License Mode
             
            emailValidator.FromEmail = "someone@somewhere.com";
            emailValidator.FromMailServer = "mail.somewhere.com";
             
            //Set up a file for logging
            string fileName = "c:\\log.txt";
            emailValidator.EnableLogging(fileName);
             
            //Connect using the best available options
            List<ValidationOptions> options = emailValidator.BestConnectionOptions();
            Console.WriteLine(emailValidator.BestConnectionMessage);
             
            //Validate a single email with the best available options
            Result myResult = emailValidator.ValidEmail("john.smith@hotmail.com", options);
             
            //Print the results to the console
            Console.WriteLine(System.IO.File.ReadAllText(fileName));]]>
            	</code>
            	<code lang="VB" title="Enable Logging File VB.NET">
            		<![CDATA[
            Dim emailValidator As EmailValidation = New EmailValidation() 'Trial Mode
            'Dim emailValidator As EmailValidation = New EmailValidation("place user name here", "place license key here") 'License Mode
             
            emailValidator.FromEmail = "someone@somewhere.com"
            emailValidator.FromMailServer = "mail.somewhere.com"
             
            'Set up a file for logging
            Dim fileName As String = "c:\log.txt"
            emailValidator.EnableLogging(fileName)
             
            'Connect using the best available options
            Dim options As List(Of ValidationOptions) = emailValidator.BestConnectionOptions()
            Console.WriteLine(emailValidator.BestConnectionMessage)
             
            'Validate a single email with the best available options
            Dim myResult As Result = emailValidator.ValidEmail("john.smith@hotmail.com", options)
             
            'Print the results to the console
            Console.WriteLine(System.IO.File.ReadAllText(fileName))]]>
            	</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.EnableLogging(System.IO.MemoryStream@)">
            <summary>
            Log to a memory stream
            </summary>
            <example>
            	<code lang="CS" title="Enable Logging Memory CSharp">
            		<![CDATA[
            EmailValidation emailValidator = new EmailValidation(); //Trial Mode
            //EmailValidation emailValidator = new EmailValidation("place user name here", "place license key here"); //License Mode
             
            emailValidator.FromEmail = "someone@somewhere.com";
            emailValidator.FromMailServer = "mail.somewhere.com";
             
            //Set up a memory stream for logging
            System.IO.MemoryStream memStream = new System.IO.MemoryStream();
            emailValidator.EnableLogging(ref memStream);
             
            //Connect using the best available options
            List<ValidationOptions> options = emailValidator.BestConnectionOptions();
            Console.WriteLine(emailValidator.BestConnectionMessage);
             
            //Validate a single email with the best available options
            Result myResult = emailValidator.ValidEmail("john.smith@hotmail.com", options);
             
            //Print the results to the console
            memStream.Seek(0, 0);
             
            string logText;
             
            using (StreamReader reader = new StreamReader(memStream))
            {
               logText= reader.ReadToEnd();
            }
             
            Console.WriteLine(logText);]]>
            	</code>
            	<code lang="VB" title="Enable Logging Memory VB.NET">
            		<![CDATA[
            Dim emailValidator As EmailValidation = New EmailValidation() 'Trial Mode
            'Dim emailValidator As EmailValidation = New EmailValidation("place user name here", "place license key here") 'License Mode
             
            emailValidator.FromEmail = "someone@somewhere.com"
            emailValidator.FromMailServer = "mail.somewhere.com"
             
            'Set up a memory stream for logging
            Dim memStream As System.IO.MemoryStream = New System.IO.MemoryStream()
            emailValidator.EnableLogging(memStream)
             
            'Connect using the best available options
            Dim options As List(Of ValidationOptions) = emailValidator.BestConnectionOptions()
            Console.WriteLine(emailValidator.BestConnectionMessage)
             
            'Validate a single email with the best available options
            Dim myResult As Result = emailValidator.ValidEmail("john.smith@hotmail.com", options)
             
            'Print the results to the console
            memStream.Seek(0, 0)
             
            Dim logText As String
             
            Using reader As StreamReader = New StreamReader(memStream)
               logText= reader.ReadToEnd()
            End Using
             
            Console.WriteLine(logText)]]>
            	</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.ClearLog(System.String)">
            <summary>
            Clear the file log
            </summary>
            <example>
            	<code lang="CS" title="Clear Log File CSharp">
            		<![CDATA[
            EmailValidation emailValidator = new EmailValidation(); //Trial Mode
            //EmailValidation emailValidator = new EmailValidation("place user name here", "place license key here"); //License Mode
             
            emailValidator.FromEmail = "someone@somewhere.com";
            emailValidator.FromMailServer = "mail.somewhere.com";
             
            //Set up a file for logging
            string fileName = "c:\\log.txt";
            emailValidator.EnableLogging(fileName);
             
            //Connect using the best available options
            List<ValidationOptions> options = emailValidator.BestConnectionOptions();
            Console.WriteLine(emailValidator.BestConnectionMessage);
             
            //Validate a single email with the best available options
            Result myResult = emailValidator.ValidEmail("john.smith@hotmail.com", options);
             
            //Print the results to the console
            Console.WriteLine(System.IO.File.ReadAllText(fileName));
             
            //Clear the file
            emailValidator.ClearLog(fileName);]]>
            	</code>
            	<code lang="VB" title="Clear Log File VB.NET">
            		<![CDATA[
            Dim emailValidator As EmailValidation = New EmailValidation() 'Trial Mode
            'Dim emailValidator As EmailValidation = New EmailValidation("place user name here", "place license key here") 'License Mode
             
            emailValidator.FromEmail = "someone@somewhere.com"
            emailValidator.FromMailServer = "mail.somewhere.com"
             
            'Set up a file for logging
            Dim fileName As String = "c:\log.txt"
            emailValidator.EnableLogging(fileName)
             
            'Connect using the best available options
            Dim options As List(Of ValidationOptions) = emailValidator.BestConnectionOptions()
            Console.WriteLine(emailValidator.BestConnectionMessage)
             
            'Validate a single email with the best available options
            Dim myResult As Result = emailValidator.ValidEmail("john.smith@hotmail.com", options)
             
            'Print the results to the console
            Console.WriteLine(System.IO.File.ReadAllText(fileName))
             
            'Clear the file
            emailValidator.ClearLog(fileName)]]>
            	</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.ClearLog(System.IO.MemoryStream@)">
            <summary>
            Clear the memory stream log
            </summary>
            <example>
            	<code lang="CS" title="Clear Log Memory CSharp">
            		<![CDATA[
            EmailValidation emailValidator = new EmailValidation(); //Trial Mode
            //EmailValidation emailValidator = new EmailValidation("place user name here", "place license key here"); //License Mode
             
            emailValidator.FromEmail = "someone@somewhere.com";
            emailValidator.FromMailServer = "mail.somewhere.com";
             
            //Set up a memory stream for logging
            System.IO.MemoryStream memStream = new System.IO.MemoryStream();
            emailValidator.EnableLogging(ref memStream);
             
            //Connect using the best available options
            List<ValidationOptions> options = emailValidator.BestConnectionOptions();
            Console.WriteLine(emailValidator.BestConnectionMessage);
             
            //Validate a single email with the best available options
            Result myResult = emailValidator.ValidEmail("john.smith@hotmail.com", options);
             
            //Print the results to the console
            memStream.Seek(0, 0);
             
            string logText;
             
            using (StreamReader reader = new StreamReader(memStream))
            {
               logText= reader.ReadToEnd();
            }
             
            Console.WriteLine(logText);
             
            //Clear the memory stream
            emailValidator.ClearLog(ref memStream);]]>
            	</code>
            	<code lang="VB" title="Clear Log Memory VB.NET">
            		<![CDATA[
            Dim emailValidator As EmailValidation = New EmailValidation() 'Trial Mode
            'Dim emailValidator As EmailValidation = New EmailValidation("place user name here", "place license key here") 'License Mode
             
            emailValidator.FromEmail = "someone@somewhere.com"
            emailValidator.FromMailServer = "mail.somewhere.com"
             
            'Set up a memory stream for logging
            Dim memStream As System.IO.MemoryStream = New System.IO.MemoryStream()
            emailValidator.EnableLogging(memStream)
             
            'Connect using the best available options
            Dim options As List(Of ValidationOptions) = emailValidator.BestConnectionOptions()
            Console.WriteLine(emailValidator.BestConnectionMessage)
             
            'Validate a single email with the best available options
            Dim myResult As Result = emailValidator.ValidEmail("john.smith@hotmail.com", options)
             
            'Print the results to the console
            memStream.Seek(0, 0)
             
            Dim logText As String
             
            Using reader As StreamReader = New StreamReader(memStream)
               logText= reader.ReadToEnd()
            End Using
             
            Console.WriteLine(logText)
             
            'Clear the memory stream
            emailValidator.ClearLog(memStream)]]>
            	</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.DisableLogging">
            <summary>Disable all logging.</summary>
            <example>
            	<code lang="CS" title="Disable Logging CSharp">
            		<![CDATA[
            EmailValidation emailValidator = new EmailValidation(); //Trial Mode
            //EmailValidation emailValidator = new EmailValidation("place user name here", "place license key here"); //License Mode
             
            emailValidator.FromEmail = "someone@somewhere.com";
            emailValidator.FromMailServer = "mail.somewhere.com";
             
            //Set up a file for logging
            string fileName = "c:\\log.txt";
            emailValidator.EnableLogging(fileName);
             
            //Connect using the best available options
            List<ValidationOptions> options = emailValidator.BestConnectionOptions();
            Console.WriteLine(emailValidator.BestConnectionMessage);
             
            //Validate a single email with the best available options
            Result myResult = emailValidator.ValidEmail("john.smith@hotmail.com", options);
             
            //Print the results to the console
            string logText = System.IO.File.ReadAllText(fileName);
            Console.WriteLine(logText);
             
            //Disable Logging
            emailValidator.DisableLogging();
             
            myResult = emailValidator.ValidEmail("bob.smith@hotmail.com", options);
             
            //Print the results to the console
            Console.WriteLine(System.IO.File.ReadAllText(fileName));]]>
            	</code>
            	<code lang="VB" title="Disable Logging VB.NET">
            		<![CDATA[
            Dim emailValidator As EmailValidation = New EmailValidation() 'Trial Mode
            'Dim emailValidator As EmailValidation = New EmailValidation("place user name here", "place license key here") 'License Mode
             
            emailValidator.FromEmail = "someone@somewhere.com"
            emailValidator.FromMailServer = "mail.somewhere.com"
             
            'Set up a file for logging
            Dim fileName As String = "c:\log.txt"
            emailValidator.EnableLogging(fileName)
             
            'Connect using the best available options
            Dim options As List(Of ValidationOptions) = emailValidator.BestConnectionOptions()
            Console.WriteLine(emailValidator.BestConnectionMessage)
             
            'Validate a single email with the best available options
            Dim myResult As Result = emailValidator.ValidEmail("john.smith@hotmail.com", options)
             
            'Print the results to the console
            Dim logText As String = System.IO.File.ReadAllText(fileName)
            Console.WriteLine(logText)
             
            'Disable Logging
            emailValidator.DisableLogging()
             
            myResult = emailValidator.ValidEmail("bob.smith@hotmail.com", options)
             
            'Print the results to the console
            Console.WriteLine(System.IO.File.ReadAllText(fileName))]]>
            	</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.LoadTopLevelDomains">
            <summary>
            Load a list of fake emails and domains
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.LoadTypoList">
            <summary>
            Load a list of domain typos
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.LoadFakeList">
            <summary>
            Load a list of fake emails and domains
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.LoadNotFakeList">
            <summary>
            Load domains that break the rules
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.LoadFreeEmailList">
            <summary>
            Load a list of free email addresses
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.LoadDisposableList">
            <summary>
            Load a list of disposable email addresses
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.LoadCurseWords">
            <summary>
            Load a list of curse keywords
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.LoadQuotaList">
            <summary>
            Load a list of mailbox quota keywords
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.LoadGreyList">
            <summary>
            Load a list of grey list keywords
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.LoadBlockList">
            <summary>
            Load a list of blocking keywords
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.LoadNoConnectOptions">
            <summary>
            Initialize the No connect options
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.LoadDefaultOptions">
            <summary>
            Initialize the default options
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.GetDefaultOptions">
            <summary>
            Get the default options
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.GetUnresponsiveMessage(System.String)">
            <summary>
            Get the last message recevied from an unresponsive server
            </summary>
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.GetBlockedMessage(System.String)">
            <summary>
            Get the last message received from the blocked domain
            </summary>
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.ContainsUnresponsiveServer(System.String)">
            <summary>
            Returns true if the domain is blocked by anti-spam
            </summary>
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.ContainsBlockedServer(System.String)">
            <summary>
            Returns true if the domain is blocked by anti-spam
            </summary>
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.AddUnresponsiveServer(System.String,System.String)">
            <summary>
            Add a domain to the list of blocked servers
            </summary>
            <param name="domain"></param>
            <param name="response"></param>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.AddBlockedServer(System.String,System.String)">
            <summary>
            Add a domain to the list of blocked servers
            </summary>
            <param name="domain"></param>
            <param name="response"></param>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.AddGreyServer(System.String,System.String)">
            <summary>
            Add a domain to the list of Grey Listed Servers
            </summary>
            <param name="domain"></param>
            <param name="response"></param>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.SetPreferredServer(System.String,System.String)">
            <summary>
            Set the preferred mail server for a domain
            </summary>
            <param name="domain"></param>
            <param name="server"></param>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.ContainsGreyServer(System.String)">
            <summary>
            Returns true if the domain is currently grey listed
            </summary>
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.GetGreyMessage(System.String)">
            <summary>
            Get the last message received from a grey listed server
            </summary>
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.DomainInProgress(System.String)">
            <summary>
            Returns true if the domain is currently being processed by another thread
            </summary>
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.AddDomainInProgress(System.String)">
            <summary>
            Add a domain to the list of domains being processed
            </summary>
            <param name="domain"></param>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.RemoveDomainInProgress(System.String)">
            <summary>
            We are done processing the domain in a thread, remove it so other threads can interact
            </summary>
            <param name="domain"></param>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.CheckQuotaListing(System.String)">
            <summary>
            Returns true if the mailbox quota is exceeded
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.CheckGreyListing(System.String)">
            <summary>
            Returns true if the server is greylisting and wants us to come back to verify the mailbox
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.CheckBlock(System.String)">
            <summary>
            Returns true if the server is blocking us from checking the mailbox
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.RemoveAliasedAddress(System.String)">
            <summary>
            This will remove anything after the plus sign for an aliased email
            </summary>
            <example>
            john.smith+1234@gmail.com
            </example>
            <param name="emailAddress"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.ProcessEmailAsync(System.String,System.String,System.Collections.Generic.List{KellermanSoftware.NetEmailValidation.ValidationOptions})">
            <summary>
            Validate a single email address asynchronously with a contact id from your database
            </summary>
            <param name="contactId"></param>
            <param name="emailAddress"></param>
            <param name="options"></param>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.ProcessEmail(System.String,System.String,System.Collections.Generic.List{KellermanSoftware.NetEmailValidation.ValidationOptions})">
            <summary>
            Validate an email address synchronously with a contact id from your database
            </summary>
            <param name="contactId"></param>
            <param name="emailAddress"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.TestConnection(System.Collections.Generic.List{KellermanSoftware.NetEmailValidation.ValidationOptions})">
            <summary>
            Test the connection from the selected options
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.AsdfMatch(System.String)">
            <summary>
            Returns true if the string has only asdf
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.GhjklMatch(System.String)">
            <summary>
            Returns true if the string has only ghjkl
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.CheckTypos(KellermanSoftware.NetEmailValidation.Result)">
            <summary>
            Returns true if there are no typos
            </summary>
            <param name="myResult"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.FakeEmailPatternChecker(KellermanSoftware.NetEmailValidation.Result)">
            <summary>
            Returns true if the user did not enter a fake email address
            </summary>
            <param name="myResult"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.LogStatus(KellermanSoftware.NetEmailValidation.Result,KellermanSoftware.NetEmailValidation.PassStatus,KellermanSoftware.NetEmailValidation.ValidationStatus)">
            <summary>
            Log the status to the log
            </summary>
            <param name="myResult"></param>
            <param name="passStatus"></param>
            <param name="validStatus"></param>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.CheckBlank(KellermanSoftware.NetEmailValidation.Result)">
            <summary>
            Returns true if the email address is not blank
            </summary>
            <param name="myResult"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.ThreadProc(System.Object)">
            <summary>
            Each thread in the thread pool calls this method to validate an email
            </summary>
            <param name="parms"></param>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.CheckDisposable(KellermanSoftware.NetEmailValidation.Result)">
            <summary>
            Check if the email address is a disposable email such as mailinator or spamex
            </summary>
            <param name="myResult"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.CheckFreeEmail(KellermanSoftware.NetEmailValidation.Result)">
            <summary>
            Check to make sure that the email address is not a free email such as hotmail, gmail etc.
            </summary>
            <param name="myResult"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.CheckMaximumEmailsValidated(KellermanSoftware.NetEmailValidation.Result)">
            <summary>
            Check to see if we have validated the maximum number of emails in the trial
            </summary>
            <param name="myResult"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.CheckCurseWords(KellermanSoftware.NetEmailValidation.Result)">
            <summary>
            Check that the user did not enter foul language in their email address
            </summary>
            <param name="myResult"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.CheckBlackListed(KellermanSoftware.NetEmailValidation.Result)">
            <summary>
            Check to make sure the user, domain, or word is not black listed
            </summary>
            <param name="myResult"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.FindInList(KellermanSoftware.NetEmailValidation.Result,System.Collections.Generic.Dictionary{System.String,KellermanSoftware.NetEmailValidation.CompareMethod})">
            <summary>
            Match a part of the email address with a list
            </summary>
            <param name="myResult"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.CheckWhiteListed(KellermanSoftware.NetEmailValidation.Result)">
            <summary>
            Check if the user, domain, or email is white listed
            </summary>
            <param name="myResult"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.ValidDomainEnding(KellermanSoftware.NetEmailValidation.Result)">
            <summary>
            Verify to see if the email ends with a known domain ending
            </summary>
            <param name="myResult"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.ValidSyntax(KellermanSoftware.NetEmailValidation.Result)">
            <summary>
            Check the basic syntax of the email address
            </summary>
            <param name="myResult"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.ValidDomain(KellermanSoftware.NetEmailValidation.Result)">
            <summary>
            Check to see if the domain exists
            </summary>
            <param name="myResult"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.ValidSmtpCheck(KellermanSoftware.NetEmailValidation.Result)">
            <summary>
            Perform an SMTP connect and Mailbox Exists Check
            </summary>
            <param name="myResult"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.ContainsNoMxRecords(System.String)">
            <summary>
            Returns true if the domain has no MX Records
            </summary>
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.AddNoMxRecords(System.String)">
            <summary>
            Add a domain to the list of no mx records
            </summary>
            <param name="domain"></param>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.ContainsMxCache(System.String)">
            <summary>
            Returns true if the MxRecord is cached
            </summary>
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.AddMxCache(System.String,KellermanSoftware.NetEmailValidation.MxRecord)">
            <summary>
            Add a domain to the MxRecord cache
            </summary>
            <param name="domain"></param>
            <param name="mxRecord"></param>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.EmailValidation.ValidMailServer(KellermanSoftware.NetEmailValidation.Result)">
            <summary>
            Verify that the domain has a corresponding mail exchange record
            </summary>
            <param name="myResult"></param>
            <returns></returns>
        </member>
        <member name="T:KellermanSoftware.NetEmailValidation.MxRecord">
            <summary>
            A list of MxRecords for a domain with the Preferred one
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetEmailValidation.PassStatus">
            <summary>
            Pass or Fail Status for Each Validation Option
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetEmailValidation.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.Properties.Resources.Blocking_Sorted">
             <summary>
               Looks up a localized string similar to 5 7 1
            andreas prass org
            antispam
            anti
            authenticate
            authentication
            bad domain
            banned
            black list
            blacklist
            blacklisted
            block list
            blocked
            blocker
            borderware
            bsn
            client host
            connection
            content filtering
            content not accepted
            content rejected
            content restrictions
            denied by policy
            dial up
            dialup
            dnsbl
            dnsbls
            dynamic
            dynamically
            inguard
            ip address
            junk mail
            junkmail
            mcspamsignature
            mismatch
            no ip
            not allowed
            not permitted
            outblaze
            pbl
            pobox
            policy violation 
            rbl
            refused
             [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.Properties.Resources.CurseWords_Sorted">
             <summary>
               Looks up a localized string similar to arse
            arsehole
            ass
            assbag
            assbandit
            assbanger
            assbite
            assclown
            asscock
            assface
            assfuck
            assfucker
            asshat
            asshead
            asshole
            asshopper
            assjacker
            asslicker
            assmunch
            assshole
            asswipe
            bampot
            bastard
            beaner
            bitch
            bitchass
            bitchy
            biteme
            bite me
            blow job
            blowjob
            blowme
            blow me
            boner
            brotherfucker
            bull shit
            bullshit
            bumblefuck
            butt fucka
            butt fucker
            butt pirate
            butt plug
            buttfucka
            buttfucker
            buttpirate
            buttplug
            camel toe
            carpet muncher
            carpetmuncher
            chinc
            chink
            choad
            c [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.Properties.Resources.DEA_Sorted">
             <summary>
               Looks up a localized string similar to 027168.com
            0815.ru
            0815.ry
            0815.su
            0845.ru
            0box.eu
            0clickemail.com
            0-mail.com
            0n0ff.net
            0nelce.com
            0v.ro
            0w.ro
            0wnd.net
            0wnd.org
            0x207.info
            1000rebates.stream
            100likers.com
            105kg.ru
            10mail.com
            10mail.org
            10minut.com.pl
            10minut.xyz
            10minutemail.be
            10minutemail.cf
            10minutemail.co.uk
            10minutemail.co.za
            10minutemail.com
            10minutemail.de
            10minutemail.ga
            10minutemail.gq
            10minutemail.ml
            10minutemail.net
            10minutemail.nl
            10minutemail.pro
            10minutemail.us
            10minutemailbox.com
            10minute [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.Properties.Resources.FakeAddresses_Sorted">
             <summary>
               Looks up a localized string similar to @1.com
            @111.com
            @123.com
            @14.com
            @2.com
            @45.net
            @456.com
            @aaa.com
            @ad.com
            @adios.com
            @admin.com
            @ahsh.com
            @amdy.com
            @anywhere.com
            @anonymous.com
            @as.com
            @asd.com
            @asda.com
            @asdf.com
            @asdf.net
            @asdfa.com
            @asdfas.com
            @asdfasd.com
            @asdfasdf.com
            @asp.net
            @at.com
            @bar.com
            @batman.com
            @bb.com
            @bbb.com
            @bf.com
            @biteme.com
            @blah.com
            @blow.com
            @bob.com
            @bop.gov
            @burp.com
            @bzz.com
            @chance.com
            @com.com
            @company.com
            @company.net
            @crimeware.com
            @dad.com
            @dddd.com
            @ddgd.com
            @ [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.Properties.Resources.FreeEmail_Sorted">
             <summary>
               Looks up a localized string similar to 020.co.uk
            027168.com
            07819.tk
            080mail.com
            0815.su
            0ak.org
            0box.eu
            0hboy.com
            0-mail.com
            0mixmail.info
            0nce.net
            0nedrive.tk
            0nly.org
            0rdered.com
            0regon.net
            0sg.net
            0x03.tk
            1.atm-mi.cf
            1.atm-mi.ga
            1.atm-mi.gq
            1.atm-mi.ml
            1.atm-mi.tk
            1000kti.xyz
            1000rebates.stream
            100kti.xyz
            10host.top
            10launcheds.com
            10mail.org
            10minut.com.pl
            10minut.xyz
            10minutemail.co.uk
            10minutemail.co.za
            10minutemail.net
            10minutemail.pl
            10minutemail.us
            10minutemailbox.com
            10minutenemail.de
            10minutesmail [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.Properties.Resources.Greylisting_Sorted">
             <summary>
               Looks up a localized string similar to gray bounce
            grey bounce
            gray listed
            gray listing
            graylisted
            graylisting
            grey listed
            grey listing
            greylisted
            greylisting
            mailbox busy
            please try later
            please wait
            service not available
            service unavailable
            temporarily unavailable
            temporary envelope failure
            too busy
            try again
            try again later
            try again soon
            mail too quickly
            service is unavailable
            server configuration problem
            please resend
            send again
            please retry later.
             </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.Properties.Resources.MailboxQuota_Sorted">
             <summary>
               Looks up a localized string similar to disk quota
            over quota
            quota exceeded
            size limit
            mail size
            count over quota
            account limit exceeded.
             </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.Properties.Resources.Not_Fake">
             <summary>
               Looks up a localized string similar to @i.ua
            dad@
            @q.com.
             </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.Properties.Resources.TopLevelDomains">
             <summary>
               Looks up a localized string similar to .aaa
            .aarp
            .abarth
            .abb
            .abbott
            .abbvie
            .abc
            .able
            .abogado
            .abudhabi
            .ac
            .academy
            .accenture
            .accountant
            .accountants
            .aco
            .active
            .actor
            .ad
            .adac
            .ads
            .adult
            .ae
            .aeg
            .aero
            .aetna
            .af
            .afamilycompany
            .afl
            .africa
            .ag
            .agakhan
            .agency
            .ai
            .aig
            .aigo
            .airbus
            .airforce
            .airtel
            .akdn
            .al
            .alfaromeo
            .alibaba
            .alipay
            .allfinanz
            .allstate
            .ally
            .alsace
            .alstom
            .am
            .americanexpress
            .americanfamily
            .amex
            .amfam
            .amica
            .amsterdam
            .an
            .analytics
            .android
            .a [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.Properties.Resources.Typos_Sorted">
             <summary>
               Looks up a localized string similar to @ahoo.com
            @hotmai.com
            @hotmiail.com
            @hotmial.com
            @hotmaill.com
            @hotmailc.com
            @htomail.com
            @htmail.com
            @redifmail.com
            @refifmail.com
            @sbcblobal.net
            @yahyoo.com
            @yaho.com
            @yaoo.com
            @y1hoo.com
            @yhaoo.com
            @gmaill.com
            @gmaiil.com
            @gmal.com
            @neetzero.net
            @sbcgobal.net
            @hotmail.net
            @yahoomail.com
            @yahho.com
            @yajoomail.com
            @gmial.com
            @otmail.com
            @hotmil.com
            @hotail.com
            @hotamail.com
            @yaho.com
            .
             </summary>
        </member>
        <member name="T:KellermanSoftware.NetEmailValidation.ConnectionStatus">
            <summary>
            General connection errors
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEmailValidation.ConnectionStatus.UnknownError">
            <summary>
            An Unknown Error has occured
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEmailValidation.ConnectionStatus.NotConnected">
            <summary>
            The socket is not connected
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEmailValidation.ConnectionStatus.CannotResolve">
            <summary>
            Cannot resolve host name
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEmailValidation.ConnectionStatus.CannotConnect">
            <summary>
            Cannot connect to host
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEmailValidation.ConnectionStatus.ConnectionClosed">
            <summary>
            The connection was closed by the user
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEmailValidation.ConnectionStatus.ConnectionLost">
            <summary>
            The connection was closed by the host
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEmailValidation.ConnectionStatus.SocketError">
            <summary>
            A socket error occured
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEmailValidation.ConnectionStatus.ProxyError">
            <summary>
            The proxy server rejected the request
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetEmailValidation.ConnectionException">
            <summary>
            Occurs when we are unable to connect to the remote host 
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.ConnectionException.#ctor(KellermanSoftware.NetEmailValidation.ConnectionStatus,System.Object[])">
            <summary>
            Pass in the status and the arguments to be formatted
            </summary>
            <param name="status"></param>
            <param name="args"></param>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.ConnectionException.#ctor(KellermanSoftware.NetEmailValidation.ConnectionStatus,System.Exception,System.Object[])">
            <summary>
            Pass in the status, the inner exception, and the arguments to be formatted
            </summary>
            <param name="status"></param>
            <param name="innerException"></param>
            <param name="args"></param>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.ConnectionException.Status">
            <summary>
            The status of the connection exception
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetEmailValidation.ProxyType">
            <summary>
            The Protocol to use for the Proxy Server
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEmailValidation.ProxyType.None">
            <summary>
            No proxy protocol is used
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEmailValidation.ProxyType.Socks4">
            <summary>
            Use the socks 4 Protocol
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEmailValidation.ProxyType.Socks5">
            <summary>
            Use the socks 5 Protocol
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEmailValidation.ProxyType.Http">
            <summary>
            Use the HTTP Protocol
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEmailValidation.ProxyType.User">
            <summary>
            User Command
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEmailValidation.ProxyType.Site">
            <summary>
            Site Command
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEmailValidation.ProxyType.Open">
            <summary>
            The Proxy Server is Open
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetEmailValidation.ProxyInfo">
            <summary>
            Information about the Proxy Server
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.ProxyInfo.Type">
            <summary>
            The type of protocol to use for the Proxy Server
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.ProxyInfo.Host">
            <summary>
            The IP Address or Host Name of the Proxy Server
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.ProxyInfo.Port">
            <summary>
            The port of the proxy server
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.ProxyInfo.UserName">
            <summary>
            The user name to use to log in to the proxy server
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.ProxyInfo.Password">
            <summary>
            The password to use to log in to the proxy server
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetEmailValidation.Proxy.TimedSocket">
            <summary>
            This is a helper class for allowing a socket to have a timeout on accept
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEmailValidation.Proxy.TimedSocket._completed">
            <summary>
            This member will signal when the asynchronous operation is completed.
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.Proxy.TimedSocket.#ctor">
            <summary>
            private constructor, so this helper class cannot be instantiated outside.
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.Proxy.TimedSocket.AcceptWithTimeout(System.Net.Sockets.Socket,System.Int64)">
            <summary>
            This methods returns the accepted socket, or null on timeout.
            </summary>
            <param name="s">The socket accepting connections.</param>
            <param name="timeout">The timeout, in milliseconds.</param>
            <returns>Returns the accepted socket, or null on timeout.</returns>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.Proxy.TimedSocket.Accept(System.Net.Sockets.Socket)">
            <summary>
            This methods works the same as Socket.Accept().
            It was added cause it could be helpful in some cases.
            </summary>
            <param name="s">The socket accepting connections.</param>
            <returns>Returns the same as Socket.Accept().</returns>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.Proxy.TimedSocket.Accept(System.Net.Sockets.Socket,System.Int64)">
            <summary>
            This methods returns the accepted socket, or null on timeout.
            </summary>
            <param name="s">The socket accepting connections.</param>
            <param name="timeout">The timeout, in milliseconds.</param>
            <remarks>If timeout is less or equal than 0, it works the same as Socket.Accept()</remarks>
            <returns>Returns the accepted socket, or null on timeout.</returns>
        </member>
        <member name="T:KellermanSoftware.NetEmailValidation.Result">
            <summary>
            The result after an email address is validated
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.Result.CatchAllDomain">
            <summary>
            If true, this is a catch all domain.  If false, it is not a catch all domain.  If null, the catch all domain check was not run.
            </summary>
            <example>
              <code title="Example" description="" lang="CS">
            EmailValidation valid = new EmailValidation(); //Trial Mode
            //EmailValidation valid = new EmailValidation("place user name here", "place license key here"); //License Mode
             
            valid.FromEmail = "someone@somewhere.com";
            valid.FromMailServer = "mail.somewhere.com";
             
            var options = valid.DefaultOptions;
            options.Add(ValidationOptions.CatchAllDomainCheck);
            Result myResult = valid.ValidEmail("john.doe@hotmail.com", options);
             
            //This will be false.
            Console.WriteLine(myResult.CatchAllDomain);
             
            //Print the results to the console
            Console.WriteLine(myResult.UserMessage);
            Console.WriteLine();
            Console.WriteLine(myResult.StatusDescription);
            Console.WriteLine();
            Console.WriteLine(myResult.Log);</code>
              <code title="Example2" description="" lang="VB.NET">
            Dim valid As New EmailValidation() 'Trial Mode
            'EmailValidation valid = new EmailValidation("place user name here", "place license key here"); //License Mode
             
            valid.FromEmail = "someone@somewhere.com"
            valid.FromMailServer = "mail.somewhere.com"
             
            Dim options = valid.DefaultOptions
            options.Add(ValidationOptions.CatchAllDomainCheck)
            Dim myResult As Result = valid.ValidEmail("john.doe@hotmail.com", options)
             
            'This will be false.
            Console.WriteLine(myResult.CatchAllDomain)
             
            'Print the results to the console
            Console.WriteLine(myResult.UserMessage)
            Console.WriteLine()
            Console.WriteLine(myResult.StatusDescription)
            Console.WriteLine()
            Console.WriteLine(myResult.Log)</code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.Result.ValidationOptionResults">
            <summary>
            A list of individual Validation Options and whether they Passed, Failed etc.
            </summary>
            <example>
              <code title="Example" description="" lang="CS">
            EmailValidation valid = new EmailValidation(); //Trial Mode
            //EmailValidation valid = new EmailValidation("place user name here", "place license key here"); //License Mode
             
            valid.FromEmail = "jane.doe@hotmail.com";
            valid.FromMailServer = "mail.hotmail.com";
             
            List&lt;ValidationOptions&gt; options = valid.NoConnectOptions;
            Result result = valid.ValidEmail("john.doe@sly.io", options);
             
            foreach (var optionResult in result.ValidationOptionResults)
            {
                Console.WriteLine("{0}: {1}", optionResult.Key, optionResult.Value);
            }</code>
              <code title="Example2" description="" lang="VB.NET">
            Dim valid As New EmailValidation() 'Trial Mode
            'EmailValidation valid = new EmailValidation("place user name here", "place license key here"); //License Mode
             
            valid.FromEmail = "jane.doe@hotmail.com"
            valid.FromMailServer = "mail.hotmail.com"
             
            Dim options As List(Of ValidationOptions) = valid.NoConnectOptions
            Dim result As Result = valid.ValidEmail("john.doe@sly.io", options)
             
            For Each optionResult In result.ValidationOptionResults
                Console.WriteLine("{0}: {1}", optionResult.Key, optionResult.Value)
            Next optionResult</code>
            </example>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.Result.Retries">
            <summary>
            Retries performed after an SMTP timeout
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.Result.StartTime">
            <summary>
            The time validation started for this email
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.Result.EndTime">
            <summary>
            The time validation ended for this email
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.Result.Elapsed">
            <summary>
            The time it took to validate the email address
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.Result.UserMessage">
            <summary>
            Returns a nice message to display to the user when there is a problem
            </summary>
            <returns></returns>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.Result.Options">
            <summary>
            The validation options chosen to validate this address
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.Result.DomainNoTld">
            <summary>
            The Domain with out the ending
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.Result.EmailSentence">
            <summary>
            Lower case with alpha, numbers, and spaces
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.Result.User">
            <summary>
            Property Get/Set for User
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.Result.SbLog">
            <summary>
            String builder for the log
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.Result.Log">
            <summary>
            A log of all the validation performed against this email address
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.Result.ContactId">
            <summary>
            Holds the primary key for the contact in your database.
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.Result.IsValid">
            <summary>
            If true the email address is valid
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.Result.StatusMessage">
            <summary>
            Internally used to set special messages
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.Result.StatusDescription">
            <summary>
            The reason why the validation failed
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.Result.EmailAddress">
            <summary>
            The email address validated
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.Result.Domain">
            <summary>
            The domain of the email address
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.Result.MxRecords">
            <summary>
            A list of the mail exchange records for the domain
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.Result.MailServer">
            <summary>
            The preferred mail server for the domain
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.Result.Status">
            <summary>
            The status of the validation
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.Result.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.SmtpValidation.SendCommand(KellermanSoftware.NetEmailValidation.Result,KellermanSoftware.NetEmailValidation.Proxy.ProxySocket,System.String)">
            <summary>
            Send a command and get a response from the SMTP Server
            </summary>
            <param name="myResult"></param>
            <param name="proxySocket"></param>        
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.SmtpValidation.ReadResponse(KellermanSoftware.NetEmailValidation.Result,KellermanSoftware.NetEmailValidation.Proxy.ProxySocket)">
            <summary>
            Get a response from the SMTP Server
            </summary>
            <param name="myResult"></param>
            <param name="proxySocket"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.SmtpValidation.AddGrey(KellermanSoftware.NetEmailValidation.EmailValidation,KellermanSoftware.NetEmailValidation.Result,System.String)">
            <summary>
            Add the server to the grey listed server list
            </summary>
            <param name="parent"></param>
            <param name="myResult"></param>
            <param name="response"></param>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.SmtpValidation.ProcessQuota(KellermanSoftware.NetEmailValidation.EmailValidation,KellermanSoftware.NetEmailValidation.Result)">
            <summary>
            Return true if we are not going to fail for the mailbox being over quota
            </summary>
            <param name="parent"></param>
            <param name="myResult"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.SmtpValidation.AddUnresponsiveServer(KellermanSoftware.NetEmailValidation.EmailValidation,KellermanSoftware.NetEmailValidation.Result,System.String)">
            <summary>
            Add the domain to the blocked domains list
            </summary>
            <param name="parent"></param>
            <param name="myResult"></param>
            <param name="response"></param>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.SmtpValidation.AddBlock(KellermanSoftware.NetEmailValidation.EmailValidation,KellermanSoftware.NetEmailValidation.Result,System.String)">
            <summary>
            Add the domain to the blocked domains list
            </summary>
            <param name="parent"></param>
            <param name="myResult"></param>
            <param name="response"></param>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.SmtpValidation.Retry(KellermanSoftware.NetEmailValidation.EmailValidation,KellermanSoftware.NetEmailValidation.Result)">
            <summary>
            Retry connecting to an SMTP Server after a timeout
            </summary>
            <param name="parent"></param>
            <param name="myResult"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.NetEmailValidation.SmtpValidation.ValidSmtp(KellermanSoftware.NetEmailValidation.EmailValidation,KellermanSoftware.NetEmailValidation.Result,System.Boolean)">
            <summary>
            Performs SMTP Connect, Mailbox Check, Grey Listing Check, and Restricted Server Check
            </summary>
            <param name="parent"></param>
            <param name="myResult"></param>
            <param name="catchAllDomainCheck"></param>
            <returns></returns>
        </member>
        <member name="T:KellermanSoftware.NetEmailValidation.ValidationOptions">
            <summary>
            The validation to perform on an email address
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEmailValidation.ValidationOptions.NotBlank">
            <summary>
            Ensure the email is not blank
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEmailValidation.ValidationOptions.WhiteList">
            <summary>
            Perform white listing against email addresses
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEmailValidation.ValidationOptions.BlackList">
            <summary>
            Perform blank listing against email addresses
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEmailValidation.ValidationOptions.BasicSyntax">
            <summary>
            Perform an RFC 821 Syntax Check
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEmailValidation.ValidationOptions.KnownDomainEnding">
            <summary>
            Check that the TLD (Top Level Domain) is valid
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEmailValidation.ValidationOptions.DisallowCurseWords">
            <summary>
            Ensure there are no curse words in the email address
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEmailValidation.ValidationOptions.FakeEmailPatternMatcher">
            <summary>
            Powerful fake email pattern checking
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEmailValidation.ValidationOptions.TypoChecking">
            <summary>
            Ensure common domains such as hotmail, gmail, etc do not have typos
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEmailValidation.ValidationOptions.DisallowDisposableEmail">
            <summary>
            Do not allow disposable emails such as mailinator.com
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEmailValidation.ValidationOptions.DisallowFreeEmail">
            <summary>
            Do not allow free emails such as hotmail.com and gmail.com
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEmailValidation.ValidationOptions.MailServerExists">
            <summary>
            Ensure the mail server exists
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEmailValidation.ValidationOptions.SmtpConnect">
            <summary>
            Connect to the mail server
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEmailValidation.ValidationOptions.MailboxExists">
            <summary>
            Ensure the user has a valid mailbox on the system
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEmailValidation.ValidationOptions.PublicWebsite">
            <summary>
            Ensure the domain has a corresponding public website
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEmailValidation.ValidationOptions.FailOnBlock">
            <summary>
            Fail when the mail server is blocking us using anti-spam software
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEmailValidation.ValidationOptions.FailOnQuotaExceeded">
            <summary>
            Fail when the quota for the email box is exceeded
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEmailValidation.ValidationOptions.FailOnUnresponsive">
            <summary>
            Fail when the mail server is unresponsive
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEmailValidation.ValidationOptions.IgnoreConnectivityErrors">
            <summary>
            Ignore connection errors when doing MX lookup
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEmailValidation.ValidationOptions.CatchAllDomainCheck">
            <summary>
            Check to see if the domain is a catch all domain
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetEmailValidation.ProgressEventArgs">
            <summary>
            Progress information for asynchronous email validation
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.ProgressEventArgs.TotalEmailsToProcess">
            <summary>
            The total amount of emails to process
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.ProgressEventArgs.EmailsProcessed">
            <summary>
            The amount of emails processed
            </summary>
        </member>
        <member name="P:KellermanSoftware.NetEmailValidation.ProgressEventArgs.ProgressPercentage">
            <summary>
            The percentage validated
            </summary>
        </member>
        <member name="T:KellermanSoftware.NetEmailValidation.ValidationStatus">
            <summary>
            Detailed status of the email validation
            </summary>
        </member>
        <member name="F:KellermanSoftware.NetEmailValidation.ValidationStatus.ExceptionOccurred">
            <summary>
            An Exception Occurred
            </summary>
        </member>
        <member name="T:KellermanSoftware.Licensing.IniFile">
            <summary>
            Create a New INI file to store or load data
            <BR /><b>Author:</b>  Gregory T. Finzer<BR />
            <b>Date:</b>  10/12/2002
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.IniFile.Path">
            <summary>
            Returns the path to the ini file
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.IniFile.INIPathWritable">
            <summary>
            Returns True if the INI path is writable
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniFile.#ctor(System.String)">
            <summary>
            INIFile Constructor.
            </summary>
            <PARAM name="INIPath">File Path to the INI File</PARAM>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniFile.IniWriteValue(System.String,System.String,System.String)">
            <summary>
            Write Data to the INI File
            </summary>
            <param name="section">Section Name</param>
            <param name="key">Key Name</param>
            <param name="value">Value Name</param>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniFile.CheckINIPath">
            <summary>
            Ensure the directory exists for the 
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniFile.IniReadValue(System.String,System.String)">
            <summary>
            Read Data from an INI File
            </summary>
            <param name="section">Section Name</param>
            <param name="key">Key Name</param>
            <returns>Value</returns>
        </member>
        <member name="T:KellermanSoftware.Licensing.Entry">
            <summary>
            Hold Subscription Entries 
            </summary>
        </member>
        <member name="T:KellermanSoftware.Licensing.IniReaderWriter">
            <summary>
            Fully Managed INI File Reader and Writer without any COM Interop
            See:  http://en.wikipedia.org/wiki/INI_file
            See:  http://msdn.microsoft.com/en-us/library/windows/desktop/ms724348%28v=vs.85%29.aspx
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.IniReaderWriter.FileEncoding">
            <summary>
            Override the file encoding.  The default is Encoding.Default
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.IniReaderWriter.IsProcessEscapeCharactersEnabled">
            <summary>
            If true, escape characters will be processed.  The default is false.
            See http://en.wikipedia.org/wiki/INI_file
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.IniReaderWriter.CommentCharacter">
            <summary>
            The comment character.  By default it is a semicolon
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.IniReaderWriter.Delimiter">
            <summary>
            The delimiter between settings and values.  By default it is a equals sign
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.GetPrivateProfileString(System.String,System.String,System.String,System.String@,System.Int32,System.String)">
            <summary>
            Managed version of GetPrivateProfileString<br />
            No COM Interop is used<br />
            If the file does not exist or the value is not in the file, the defaultValue is used.<br />
            See:  http://msdn.microsoft.com/en-us/library/windows/desktop/ms724348%28v=vs.85%29.aspx
            </summary>
            <param name="sectionName">The INI Section Name</param>
            <param name="settingName">The INI Setting Name</param>
            <param name="defaultValue">The default value if there is no value</param>
            <param name="returnedString">Output of the string</param>
            <param name="size">The number of buffer characters (not used but here for backward compatibility)</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns>Number of characters returned</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.GetPrivateProfileString(System.String,System.String,System.String,System.Text.StringBuilder,System.Int32,System.String)">
            <summary>
            Managed version of GetPrivateProfileString<br />
            No COM Interop is used<br />
            If the file does not exist or the value is not in the file, the defaultValue is used.<br />
            See:  http://msdn.microsoft.com/en-us/library/windows/desktop/ms724348%28v=vs.85%29.aspx
            </summary>
            <param name="sectionName">The INI Section Name</param>
            <param name="settingName">The INI Setting Name</param>
            <param name="defaultValue">The default value if there is no value</param>
            <param name="returnedBuffer">StrinbBuilder Output of the string</param>
            <param name="size">The number of buffer characters (not used but here for backward compatibility)</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns>Number of characters returned</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.WritePrivateProfileString(System.String,System.String,System.String,System.String)">
            <summary>
            Managed version of WritePrivateProfileString<br />
            No COM Interop is used<br />
            If the file does not exist it will be created.  If the section does not exist it will be created.  If the setting already exists it will be updated.  If the setting does not exist, it will be added.<br />
            See:  http://msdn.microsoft.com/en-us/library/windows/desktop/ms724348%28v=vs.85%29.aspx
            </summary>
            <param name="sectionName">The INI Section Name</param>
            <param name="settingName">The INI Setting Name</param>
            <param name="settingValue">The INI Setting Value</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns>True if the setting was set successfully</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.GetPrivateProfileInt(System.String,System.String,System.Int32,System.String)">
            <summary>
            Managed version of GetPrivateProfileInt<br />
            No COM Interop is used<br />
            If the file does not exist or the value is not in the file, the defaultValue is used.<br />
            See:  http://msdn.microsoft.com/en-us/library/windows/desktop/ms724348%28v=vs.85%29.aspx
            </summary>
            <param name="sectionName">The INI Section Name</param>
            <param name="settingName">The INI Setting Name</param>
            <param name="defaultValue">The default value if there is no value</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns>The integer</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.GetSectionNames(System.String)">
            <summary>
            Get a list of the sections in an INI file<br />
            No COM Interop is used<br />
            If the file does not exist, no sections will be returned.
            </summary>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when filePath is null</exception>
            <returns>A list of the section names</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.GetSectionValues(System.String,System.String)">
            <summary>
            Get a dictionary of the key value pairs for a section in an INI file<br />
            No COM Interop is used<br />
            If the file does not exist, no items will be returned.
            </summary>
            <param name="sectionName">The section name</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, or filePath is null</exception>
            <returns>A list of the settings and their values</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.SettingExists(System.String,System.String,System.String)">
            <summary>
            Return true if a setting exists<br />
            No COM Interop is used<br />
            If the file does not exist or the setting does not exist, the value returned will be false.
            </summary>
            <param name="sectionName">The section name</param>
            <param name="settingName">The setting name</param>
            <param name="filePath">The path to the INI File</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.GetSetting(System.String,System.String,System.String)">
            <summary>
            Get the value for a setting in a section<br />
            No COM Interop is used<br />
            If the file does not exist or the setting does not exist, the value returned will be null.
            </summary>
            <param name="sectionName">The section name</param>
            <param name="settingName">The setting name</param>
            <param name="filePath">The path to the INI File</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.SaveSetting(System.String,System.String,System.String,System.String)">
            <summary>
            Save a value to an INI file<br />
            No COM Interop is used<br />
            If the file does not exist it will be created.  If the section does not exist it will be created.  If the setting already exists it will be updated.  If the setting does not exist, it will be added.<br />
            </summary>
            <param name="sectionName">The section name</param>
            <param name="settingName">The setting name</param>
            <param name="settingValue">The value to set</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns>True if it was saved successfully</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.DeleteSetting(System.String,System.String,System.String)">
            <summary>
            Delete a setting from an INI file<br />
            No COM Interop is used<br />
            If the file does not exist or the value does not exist, false will be returned.
            </summary>
            <param name="sectionName">The name of the section</param>
            <param name="settingName">The name of the setting</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns>True if the setting was deleted</returns>
        </member>
        <member name="T:KellermanSoftware.Licensing.Encryption">
            <summary>
            This class provides methods Encryption and Decryption using a variety
            of cryptographic algorithms. The methods are overloaded to perform
            encryption/decryption on ordinary texts of string, a MemoryStream
            or a complete file (text or binary).
            </summary>
        </member>
        <member name="F:KellermanSoftware.Licensing.Encryption.alg">
            <summary>
            The variable that will hold the relevant instantiated cryptographic class object.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Licensing.Encryption.provider">
            <summary>
            Enumeration that specifies the cryptographic service provider.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Licensing.Encryption.strKey">
            <summary>
            Serves as password used with salt to generate Key for encryption
            </summary>
        </member>
        <member name="F:KellermanSoftware.Licensing.Encryption.strSalt">
            <summary>
            The salt used for generating Key for encryption
            </summary>
        </member>
        <member name="F:KellermanSoftware.Licensing.Encryption.ivChars">
            <summary>
            The character array from which we set our initialization vector.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.#ctor">
            <summary>
            Default constructor for the Encryption class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.#ctor(System.String,System.String)">
            <summary>
            Alternate Constructor for the Encryption class.
            </summary>
            <param name="strKey">The password used for generating the Key.</param>
            <param name="strSalt">The Salt to be used in conjunction with 
            the password to generate the actual Key.</param>
        </member>
        <member name="P:KellermanSoftware.Licensing.Encryption.Key">
            <summary>
            Public property for Key
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.Encryption.Salt">
            <summary>
            Public property for Salt
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.GetIV">
            <summary>
            Get an initialization vector for the crypto algorithms.
            TODO: Random IV Generation
            </summary>
            <returns>a byte array that contains the generated initialization vector.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.GetKey">
            <summary>
            Gets the appropriate key for the cryptographic algorithm being used.
            </summary>
            <returns>a byte array that contains the generated key.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.InitializeAlgorithm(KellermanSoftware.Licensing.EncryptionProvider)">
            <summary>
            Instantiates the SymmetricAlgorithm object with the appropriate
            cryptographic service provider class.
            </summary>
            <param name="encryptionType">Enumeration that specifies which cryptographic
            algorithm is being used.</param>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.Encrypt(KellermanSoftware.Licensing.EncryptionProvider,System.String)">
            <summary>
            Encrypts a plain string.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="input">The input clear string.</param>
            <returns>A base64-encoded representation of the encrypted string.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.Encrypt(KellermanSoftware.Licensing.EncryptionProvider,System.IO.MemoryStream)">
            <summary>
            Encrypts a MemoryStream.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="memStream">The input MemoryStream object</param>
            <returns>A base64-encoded MemoryStream object</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.Encrypt(KellermanSoftware.Licensing.EncryptionProvider,System.String,System.String)">
            <summary>
            Encrypts the contents of a text file and outputs them to another file.
            TODO: Convert to Base64
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="inputFile">The path to the input file.</param>
            <param name="outputFile">The path to the output file.</param>
            <returns>A boolean that specifies whether the encryption operation was successful or not.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.Decrypt(KellermanSoftware.Licensing.EncryptionProvider,System.String)">
            <summary>
            Decrypts a base64-encoded string.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="input">The input clear string.</param>
            <returns>The decrypted plain text.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.Decrypt(KellermanSoftware.Licensing.EncryptionProvider,System.IO.MemoryStream)">
            <summary>
            Decrypts a base64-encoded MemoryStream.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="memStream">A base64-encoded MemoryStream object.</param>
            <returns>Simple MemoryStream object.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.Decrypt(KellermanSoftware.Licensing.EncryptionProvider,System.String,System.String)">
            <summary>
            Decrypts the contents of a text file and outputs them to another file.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="inputFile">The path to the input file.</param>
            <param name="outputFile">The path to the output file.</param>
            <returns>A boolean that specifies whether the decryption operation was successful or not.</returns>
        </member>
        <member name="P:KellermanSoftware.Licensing.LicensingLibrary.AdditionalInfo">
            <summary>
            Additional information about the success or failure of a public method
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.LicensingLibrary.FailedAttemptsToday">
            <summary>
            The failed attempts at checking a license today
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.LicensingLibrary.TrialExtensions">
            <summary>
            The number of trial extensions for this user
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.LicensingLibrary.TrialDays">
            <summary>
            The number of days for a trial period
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.LicensingLibrary.BetaExpirationDate">
            <summary>
            Returns the maximum date the software can run in beta
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="productCode"></param>
            <param name="productName"></param>
            <param name="website"></param>
            <param name="userName"></param>
            <param name="license"></param>
        </member>
        <member name="P:KellermanSoftware.Licensing.LicensingLibrary.IsService">
            <summary>
            Gets a value indicating whether the application is a windows service.
            </summary>
            <value>
            <c>true</c> if this instance is service; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.ValidateInput">
            <summary>
            Ensure required input
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.UsDateToString(System.DateTime)">
            <summary>
            Convert a DateTime to a US date string
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.UsDateToDate(System.String)">
            <summary>
            Convert a US formatted date to DateTime
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SetTargetLicense">
            <summary>
            Set the target license for the 
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SetupVariables">
            <summary>
            A bunch of variable initialization
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.StartTrial">
            <summary>
            This is a new installation so start the trial
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.BetaExpired">
            <summary>
            Returns true if the beta has expired
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.AllKeysBlank">
            <summary>
            Returns true if all the keys are blank
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SomeKeysBlank">
            <summary>
            Returns true if some of the keys are blank
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetKeys">
            <summary>
            Get all the keys from the registry and the INI file
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetTrialExtensions">
            <summary>
            Get the number of trial extensions
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetFailedAttemptsToday">
            <summary>
            Get the number of failed attempts today
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetUserName">
            <summary>
            Get the saved user name from the registry
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetLicense">
            <summary>
            Get the saved user name from the registry
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetLastRunDate">
            <summary>
            Get the last date the component was run, prevents back dating
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetInstallationDate">
            <summary>
            Get the date the component was installed
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.CombineKey(System.String)">
            <summary>
            Combine the key for the 
            </summary>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.ReadFromIni(System.String)">
            <summary>
            Read the key from the INI file
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.ReadFromRegistry(System.String)">
            <summary>
            Read the key from the registry
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SaveToRegistryAndIni(System.String,System.String)">
            <summary>
            Save the key and value to the registry and INI file.  
            Use the different encryption key for each.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SaveToRegistry(System.String,System.String)">
            <summary>
            Save the key to the registry
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SaveToIniFile(System.String,System.String)">
            <summary>
            Save a key to an INI file
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.UpperLetterSpace(System.String)">
            <summary>
            Make the text upper case and return only letters and spaces
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetProductShortName(System.String)">
            <summary>
            Extract product short name from the given product code.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetMajorVersion(System.String)">
            <summary>
            Extract major version from the given product code.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.ExtendTrial(System.String)">
            <summary>
            Trial extensions are good for the current day and the the next day
            </summary>
            <param name="trialExtension"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.TrialMessage">
            <summary>
            User friendly trial days remaining
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.TrialDaysLeft">
            <summary>
            Returns the number of days left in the trial
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.CheckLicense">
            <summary>
            Check to see if it is a valid license OR the user is within the trial period
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.TrialValid">
            <summary>
            Returns true if the trial is valid, false if it is expired, hacked, or backdated
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.Mid(System.Object,System.Int32,System.Int32)">
            <summary>
            Same as VB mid function except it doesn't bomb at all
            </summary>
            <param name="oString">String to parse</param>
            <param name="iStart">Start of string</param>
            <param name="iLength">Length of section</param>
            <returns>Section of string</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.Mid(System.Object,System.Int32)">
            <summary>
            Same as VB mid function except it doesn't bomb at all
            </summary>
            <param name="oString">String to parse</param>
            <param name="iStart">Starting position</param>
            <returns>The string section</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.Asc(System.String)">
            <summary>
            Get the ASCII value for the left most character of the passed string.
            </summary>
            <param name="sInString">The string to parse.</param>
            <returns>ACSCII value of the leftmost character</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.Right(System.Object,System.Int32)">
            <summary>
            Same as VB function but doesn't bomb
            </summary>
            <param name="oString">The string to parse</param>
            <param name="iLength">Starting Right Position</param>
            <returns>String section</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetLastWord(System.String,System.String)">
            <summary>
            Get the last word in a string
            </summary>
            <param name="sSentence"></param>
            <param name="sSeperator"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.NumberOfWords(System.String,System.String)">
            <summary>
            Calculate the number of words in a string
            </summary>
            <param name="sSentence">String to parse</param>
            <param name="sSeperator">Seperator character or string</param>
            <returns>The number of words in the string</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetField(System.String,System.Int32,System.String)">
            <summary>
            Parses sSentence delimited by sSeperator and returns the word specified by iPosition
            </summary>
            <param name="sSentence">The string to parse</param>
            <param name="iPosition">Which word to look for</param>
            <param name="sSeperator">What the words are delmited by</param>
            <returns>"" or the word found</returns>
        </member>
        <member name="P:KellermanSoftware.Common.Logger.CustomLogger">
            <summary>
            Property Get/Set for Custom Logger
            </summary>
        </member>
        <member name="P:KellermanSoftware.Common.Logger.LogConsole">
            <summary>
            Property Get/Set for Log Console
            </summary>
        </member>
        <member name="P:KellermanSoftware.Common.Logger.LogFile">
            <summary>
            Property Get/Set for Log File
            </summary>
        </member>
        <member name="P:KellermanSoftware.Common.Logger.LogMemory">
            <summary>
            Property Get/Set for Log Memory
            </summary>
        </member>
        <member name="P:KellermanSoftware.Common.Logger.LogCustom">
            <summary>
            Property Get/Set for Log Custom
            </summary>
        </member>
        <member name="P:KellermanSoftware.Common.Logger.FilePath">
            <summary>
            Property Get/Set for File Path
            </summary>
        </member>
        <member name="P:KellermanSoftware.Common.Logger.MemStream">
            <summary>
            Property Get/Set for Mem Stream
            </summary>
        </member>
        <member name="P:KellermanSoftware.Common.Logger.LogMemoryOffset">
            <summary>
            Property Get/Set for Log Memory Offset
            </summary>
        </member>
        <member name="M:KellermanSoftware.Common.Logger.Log(System.String)">
            <summary>
            Log strings to either a console, file or a memory stream depending on the user settings
            </summary>
        </member>
        <member name="M:KellermanSoftware.Common.Util.GetCurrentDirectory">
            <summary>
            Get the current directory of the executing assembly
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.PathSlash(System.String)">
            <summary>
            Ensure the passed string ends with a directory seperator character unless the string is blank.
            </summary>
            <param name="path">The string to append the backslash to.</param>
            <returns>String with a "/" on the end</returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.ConnectedToInternet">
            <summary>
            Returns true if we can connect to the internet
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.PingServer(System.Net.IPAddress)">
            <summary>
            Returns true if we can ping the server
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.cInt(System.Object)">
            <summary>
            Convert the passed object into an integer
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.cStr(System.Object)">
            <summary>
            Convert any object to a string
            </summary>
            <param name="value">Object to convert</param>
            <returns>A string or string.empty</returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.cDate(System.Object)">
            <summary>
            Convert the passed object into a date or return the default date
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.GetStringFromStream(System.IO.Stream)">
            <summary>
            Get a string from a memory stream or other stream
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.Writable(System.String)">
            <summary>
            Check to see if the program can create, update, and delete in the specified path.
            </summary>
            <param name="path">The path to check.</param>
            <returns>True if the path is writable.</returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.ExtractPath(System.String)">
            <summary>
            Extract the path from a path ending in a filename 
            </summary>
            <param name="fullPath">A fully qualified path ending in a filename</param>
            <returns>The extacted path</returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.RandomInt(System.Int32,System.Int32)">
            <summary>
            Get a random integer within the specified range.
            </summary>
            <param name="min">Low Bound</param>
            <param name="max">High Bound</param>
            <returns>Random integer</returns>
        </member>
        <member name="F:Heijden.DNS.Header.ID">
            <summary>
            An identifier assigned by the program
            </summary>
        </member>
        <member name="F:Heijden.DNS.Header.QDCOUNT">
            <summary>
            the number of entries in the question section
            </summary>
        </member>
        <member name="F:Heijden.DNS.Header.ANCOUNT">
            <summary>
            the number of resource records in the answer section
            </summary>
        </member>
        <member name="F:Heijden.DNS.Header.NSCOUNT">
            <summary>
            the number of name server resource records in the authority records section
            </summary>
        </member>
        <member name="F:Heijden.DNS.Header.ARCOUNT">
            <summary>
            the number of resource records in the additional records section
            </summary>
        </member>
        <member name="P:Heijden.DNS.Header.Data">
            <summary>
            Represents the header as a byte array
            </summary>
        </member>
        <member name="P:Heijden.DNS.Header.QR">
            <summary>
            query (false), or a response (true)
            </summary>
        </member>
        <member name="P:Heijden.DNS.Header.OPCODE">
            <summary>
            Specifies kind of query
            </summary>
        </member>
        <member name="P:Heijden.DNS.Header.AA">
            <summary>
            Authoritative Answer
            </summary>
        </member>
        <member name="P:Heijden.DNS.Header.TC">
            <summary>
            TrunCation
            </summary>
        </member>
        <member name="P:Heijden.DNS.Header.RD">
            <summary>
            Recursion Desired
            </summary>
        </member>
        <member name="P:Heijden.DNS.Header.RA">
            <summary>
            Recursion Available
            </summary>
        </member>
        <member name="P:Heijden.DNS.Header.Z">
            <summary>
            Reserved for future use
            </summary>
        </member>
        <member name="P:Heijden.DNS.Header.RCODE">
            <summary>
            Response code
            </summary>
        </member>
        <member name="F:Heijden.DNS.Record.RR">
            <summary>
            The Resource Record this RDATA record belongs to
            </summary>
        </member>
        <member name="T:Heijden.DNS.Resolver">
            <summary>
            Resolver is the main class to do DNS query lookups
            </summary>
        </member>
        <member name="P:Heijden.DNS.Resolver.Version">
            <summary>
            Version of this set of routines, when not in a library
            </summary>
        </member>
        <member name="F:Heijden.DNS.Resolver.DefaultPort">
            <summary>
            Default DNS port
            </summary>
        </member>
        <member name="F:Heijden.DNS.Resolver.DefaultDnsServers">
            <summary>
            Gets list of OPENDNS servers
            </summary>
        </member>
        <member name="M:Heijden.DNS.Resolver.#ctor(System.Net.IPEndPoint[])">
            <summary>
            Constructor of Resolver using DNS servers specified.
            </summary>
            <param name="DnsServers">Set of DNS servers</param>
        </member>
        <member name="M:Heijden.DNS.Resolver.#ctor(System.Net.IPEndPoint)">
            <summary>
            Constructor of Resolver using DNS server specified.
            </summary>
            <param name="DnsServer">DNS server to use</param>
        </member>
        <member name="M:Heijden.DNS.Resolver.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Constructor of Resolver using DNS server and port specified.
            </summary>
            <param name="ServerIpAddress">DNS server to use</param>
            <param name="ServerPortNumber">DNS port to use</param>
        </member>
        <member name="M:Heijden.DNS.Resolver.#ctor(System.String,System.Int32)">
            <summary>
            Constructor of Resolver using DNS address and port specified.
            </summary>
            <param name="ServerIpAddress">DNS server address to use</param>
            <param name="ServerPortNumber">DNS port to use</param>
        </member>
        <member name="M:Heijden.DNS.Resolver.#ctor(System.String)">
            <summary>
            Constructor of Resolver using DNS address.
            </summary>
            <param name="ServerIpAddress">DNS server address to use</param>
        </member>
        <member name="M:Heijden.DNS.Resolver.#ctor">
            <summary>
            Resolver constructor, using DNS servers specified by Windows
            </summary>
        </member>
        <member name="E:Heijden.DNS.Resolver.OnVerbose">
            <summary>
            Verbose messages from internal operations
            </summary>
        </member>
        <member name="P:Heijden.DNS.Resolver.TimeOut">
            <summary>
            Gets or sets timeout in milliseconds
            </summary>
        </member>
        <member name="P:Heijden.DNS.Resolver.Retries">
            <summary>
            Gets or sets number of retries before giving up
            </summary>
        </member>
        <member name="P:Heijden.DNS.Resolver.Recursion">
            <summary>
            Gets or set recursion for doing queries
            </summary>
        </member>
        <member name="P:Heijden.DNS.Resolver.TransportType">
            <summary>
            Gets or sets protocol to use
            </summary>
        </member>
        <member name="P:Heijden.DNS.Resolver.DnsServers">
            <summary>
            Gets or sets list of DNS servers to use
            </summary>
        </member>
        <member name="P:Heijden.DNS.Resolver.DnsServer">
            <summary>
            Gets first DNS server address or sets single DNS server to use
            </summary>
        </member>
        <member name="M:Heijden.DNS.Resolver.Query(System.String,Heijden.DNS.QType,Heijden.DNS.QClass)">
            <summary>
            Do Query on specified DNS servers
            </summary>
            <param name="name">Name to query</param>
            <param name="qtype">Question type</param>
            <param name="qclass">Class type</param>
            <returns>Response of the query</returns>
        </member>
        <member name="M:Heijden.DNS.Resolver.Query(System.String,Heijden.DNS.QType)">
            <summary>
            Do an QClass=IN Query on specified DNS servers
            </summary>
            <param name="name">Name to query</param>
            <param name="qtype">Question type</param>
            <returns>Response of the query</returns>
        </member>
        <member name="M:Heijden.DNS.Resolver.GetDnsServers">
            <summary>
            Gets a list of default DNS servers used on the Windows machine.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Heijden.DNS.Resolver.GetArpaFromIp(System.Net.IPAddress)">
            <summary>
            Translates the IPV4 or IPV6 address into an arpa address
            </summary>
            <param name="ip">IP address to get the arpa address form</param>
            <returns>The 'mirrored' IPV4 or IPV6 arpa address</returns>
        </member>
        <member name="M:Heijden.DNS.Resolver.GetHostAddresses(System.String)">
             <summary>
            		Returns the Internet Protocol (IP) addresses for the specified host.
             </summary>
             <param name="hostNameOrAddress">The host name or IP address to resolve.</param>
             <returns>
            		An array of type System.Net.IPAddress that holds the IP addresses for the
            		host that is specified by the hostNameOrAddress parameter. 
            </returns>
        </member>
        <member name="M:Heijden.DNS.Resolver.BeginGetHostAddresses(System.String,System.AsyncCallback,System.Object)">
             <summary>
            		Asynchronously returns the Internet Protocol (IP) addresses for the specified
                 host.
             </summary>
             <param name="hostNameOrAddress">The host name or IP address to resolve.</param>
             <param name="requestCallback">
            		An System.AsyncCallback delegate that references the method to invoke when
                 the operation is complete.
             </param>
             <param name="stateObject">
            		A user-defined object that contains information about the operation. This
                 object is passed to the requestCallback delegate when the operation is complete.
            </param>
             <returns>An System.IAsyncResult instance that references the asynchronous request.</returns>
        </member>
        <member name="M:Heijden.DNS.Resolver.EndGetHostAddresses(System.IAsyncResult)">
            <summary>
            	Ends an asynchronous request for DNS information.
            </summary>
            <param name="ar">
            	An System.IAsyncResult instance returned by a call to the Heijden.Dns.Resolver.BeginGetHostAddresses(System.String,System.AsyncCallback,System.Object)
            	method.
            </param>
            <returns></returns>
        </member>
        <member name="M:Heijden.DNS.Resolver.GetHostByAddress(System.Net.IPAddress)">
            <summary>
            	Creates an System.Net.IPHostEntry instance from the specified System.Net.IPAddress.
            </summary>
            <param name="ip">An System.Net.IPAddress.</param>
            <returns>An System.Net.IPHostEntry.</returns>
        </member>
        <member name="M:Heijden.DNS.Resolver.GetHostByAddress(System.String)">
            <summary>
            	Creates an System.Net.IPHostEntry instance from an IP address.
            </summary>
            <param name="address">An IP address.</param>
            <returns>An System.Net.IPHostEntry instance.</returns>
        </member>
        <member name="M:Heijden.DNS.Resolver.GetHostByName(System.String)">
            <summary>
            	Gets the DNS information for the specified DNS host name.
            </summary>
            <param name="hostName">The DNS name of the host</param>
            <returns>An System.Net.IPHostEntry object that contains host information for the address specified in hostName.</returns>
        </member>
        <member name="M:Heijden.DNS.Resolver.BeginGetHostByName(System.String,System.AsyncCallback,System.Object)">
            <summary>
            	Asynchronously resolves an IP address to an System.Net.IPHostEntry instance.
            </summary>
            <param name="hostName">The DNS name of the host</param>
            <param name="requestCallback">An System.AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="stateObject">
            	A user-defined object that contains information about the operation. This
            	object is passed to the requestCallback delegate when the operation is complete.
            </param>
            <returns>An System.IAsyncResult instance that references the asynchronous request.</returns>
        </member>
        <member name="M:Heijden.DNS.Resolver.EndGetHostByName(System.IAsyncResult)">
            <summary>
            	Ends an asynchronous request for DNS information.
            </summary>
            <param name="ar">
            	An System.IAsyncResult instance returned by a call to an 
            	Heijden.Dns.Resolver.BeginGetHostByName method.
            </param>
            <returns></returns>
        </member>
        <member name="M:Heijden.DNS.Resolver.Resolve(System.String)">
            <summary>
            	Resolves a host name or IP address to an System.Net.IPHostEntry instance.
            </summary>
            <param name="hostName">A DNS-style host name or IP address.</param>
            <returns></returns>
        </member>
        <member name="M:Heijden.DNS.Resolver.BeginResolve(System.String,System.AsyncCallback,System.Object)">
            <summary>
            	Begins an asynchronous request to resolve a DNS host name or IP address to
                an System.Net.IPAddress instance.
            </summary>
            <param name="hostName">The DNS name of the host.</param>
            <param name="requestCallback">
            	An System.AsyncCallback delegate that references the method to invoke when
                the operation is complete.
            </param>
            <param name="stateObject">
            	A user-defined object that contains information about the operation. This
                object is passed to the requestCallback delegate when the operation is complete.
            </param>
            <returns>An System.IAsyncResult instance that references the asynchronous request.</returns>
        </member>
        <member name="M:Heijden.DNS.Resolver.EndResolve(System.IAsyncResult)">
            <summary>
            	Ends an asynchronous request for DNS information.
            </summary>
            <param name="ar">
            	An System.IAsyncResult instance that is returned by a call to the System.Net.Dns.BeginResolve(System.String,System.AsyncCallback,System.Object)
                method.
            </param>
            <returns>An System.Net.IPHostEntry object that contains DNS information about a host.</returns>
        </member>
        <member name="M:Heijden.DNS.Resolver.GetHostEntry(System.Net.IPAddress)">
             <summary>
            		Resolves an IP address to an System.Net.IPHostEntry instance.
             </summary>
             <param name="ip">An IP address.</param>
             <returns>
            		An System.Net.IPHostEntry instance that contains address information about
            		the host specified in address.
            </returns>
        </member>
        <member name="M:Heijden.DNS.Resolver.GetHostEntry(System.String)">
             <summary>
            		Resolves a host name or IP address to an System.Net.IPHostEntry instance.
             </summary>
             <param name="hostNameOrAddress">The host name or IP address to resolve.</param>
             <returns>
            		An System.Net.IPHostEntry instance that contains address information about
            		the host specified in hostNameOrAddress. 
            </returns>
        </member>
        <member name="M:Heijden.DNS.Resolver.BeginGetHostEntry(System.String,System.AsyncCallback,System.Object)">
             <summary>
             Asynchronously resolves a host name or IP address to an System.Net.IPHostEntry instance.
             </summary>
             <param name="hostNameOrAddress">The host name or IP address to resolve.</param>
             <param name="requestCallback">
            		An System.AsyncCallback delegate that references the method to invoke when
            		the operation is complete.
            </param>
             <param name="stateObject">
            		A user-defined object that contains information about the operation. This
            		object is passed to the requestCallback delegate when the operation is complete.
             </param>
             <returns>An System.IAsyncResult instance that references the asynchronous request.</returns>
        </member>
        <member name="M:Heijden.DNS.Resolver.BeginGetHostEntry(System.Net.IPAddress,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously resolves an IP address to an System.Net.IPHostEntry instance.
            </summary>
            <param name="ip">The IP address to resolve.</param>
            <param name="requestCallback">
            	An System.AsyncCallback delegate that references the method to invoke when
            	the operation is complete.
            </param>
            <param name="stateObject">
            	A user-defined object that contains information about the operation. This
                object is passed to the requestCallback delegate when the operation is complete.
            </param>
            <returns>An System.IAsyncResult instance that references the asynchronous request.</returns>
        </member>
        <member name="M:Heijden.DNS.Resolver.EndGetHostEntry(System.IAsyncResult)">
             <summary>
             Ends an asynchronous request for DNS information.
             </summary>
             <param name="AsyncResult">
            		An System.IAsyncResult instance returned by a call to an 
            		Overload:Heijden.Dns.Resolver.BeginGetHostEntry method.
             </param>
             <returns>
            		An System.Net.IPHostEntry instance that contains address information about
            		the host. 
            </returns>
        </member>
        <member name="M:Heijden.DNS.Resolver.LoadRootFile(System.String)">
            <summary>
            Not implemented yet!!!!!
            </summary>
            <param name="strPath"></param>
        </member>
        <member name="F:Heijden.DNS.Response.Questions">
            <summary>
            List of Question records
            </summary>
        </member>
        <member name="F:Heijden.DNS.Response.Answers">
            <summary>
            List of AnswerRR records
            </summary>
        </member>
        <member name="F:Heijden.DNS.Response.Authorities">
            <summary>
            List of AuthorityRR records
            </summary>
        </member>
        <member name="F:Heijden.DNS.Response.Additionals">
            <summary>
            List of AdditionalRR records
            </summary>
        </member>
        <member name="F:Heijden.DNS.Response.Error">
            <summary>
            Error message, empty when no error
            </summary>
        </member>
        <member name="F:Heijden.DNS.Response.MessageSize">
            <summary>
            The Size of the message
            </summary>
        </member>
        <member name="F:Heijden.DNS.Response.TimeStamp">
            <summary>
            TimeStamp when cached
            </summary>
        </member>
        <member name="F:Heijden.DNS.Response.Server">
            <summary>
            Server which delivered this response
            </summary>
        </member>
        <member name="P:Heijden.DNS.Response.RecordsMX">
            <summary>
            List of RecordMX in Response.Answers
            </summary>
        </member>
        <member name="P:Heijden.DNS.Response.RecordsTXT">
            <summary>
            List of RecordTXT in Response.Answers
            </summary>
        </member>
        <member name="P:Heijden.DNS.Response.RecordsA">
            <summary>
            List of RecordA in Response.Answers
            </summary>
        </member>
        <member name="P:Heijden.DNS.Response.RecordsPTR">
            <summary>
            List of RecordPTR in Response.Answers
            </summary>
        </member>
        <member name="P:Heijden.DNS.Response.RecordsCNAME">
            <summary>
            List of RecordCNAME in Response.Answers
            </summary>
        </member>
        <member name="P:Heijden.DNS.Response.RecordsAAAA">
            <summary>
            List of RecordAAAA in Response.Answers
            </summary>
        </member>
        <member name="P:Heijden.DNS.Response.RecordsNS">
            <summary>
            List of RecordNS in Response.Answers
            </summary>
        </member>
        <member name="P:Heijden.DNS.Response.RecordsSOA">
            <summary>
            List of RecordSOA in Response.Answers
            </summary>
        </member>
        <member name="T:Heijden.DNS.RR">
            <summary>
            Resource Record (rfc1034 3.6.)
            </summary>
        </member>
        <member name="F:Heijden.DNS.RR.NAME">
            <summary>
            The name of the node to which this resource record pertains
            </summary>
        </member>
        <member name="F:Heijden.DNS.RR.Type">
            <summary>
            Specifies type of resource record
            </summary>
        </member>
        <member name="F:Heijden.DNS.RR.Class">
            <summary>
            Specifies type class of resource record, mostly IN but can be CS, CH or HS 
            </summary>
        </member>
        <member name="P:Heijden.DNS.RR.TTL">
            <summary>
            Time to live, the time interval that the resource record may be cached
            </summary>
        </member>
        <member name="F:Heijden.DNS.RR.RDLENGTH">
            <summary>
            
            </summary>
        </member>
        <member name="F:Heijden.DNS.RR.RECORD">
            <summary>
            One of the Record* classes
            </summary>
        </member>
    </members>
</doc>
